<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaScript属性描述对象整理</title>
      <link href="/hexoblog.github.io/2022/09/18/javaScript%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/"/>
      <url>/hexoblog.github.io/2022/09/18/javaScript%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="概述以及定义：JavaScript-提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes-object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。"><a href="#概述以及定义：JavaScript-提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes-object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。" class="headerlink" title="概述以及定义：JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。"></a>概述以及定义：JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。</h1><span id="more"></span><h3 id="属性描述对象有以下六个元属性-一个代码块-来描述对象的属性"><a href="#属性描述对象有以下六个元属性-一个代码块-来描述对象的属性" class="headerlink" title="属性描述对象有以下六个元属性(一个代码块)来描述对象的属性:"></a>属性描述对象有以下六个元属性(一个代码块)来描述对象的属性:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    value: 123,</span><br><span class="line">    writable:fasel,</span><br><span class="line">    enumerable: true,</span><br><span class="line">    configurable: false,</span><br><span class="line">    get: undefined,</span><br><span class="line">    set: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修改属性描述符"><a href="#修改属性描述符" class="headerlink" title="修改属性描述符"></a>修改属性描述符</h1><h3 id="（1）value-该属性的属性值"><a href="#（1）value-该属性的属性值" class="headerlink" title="（1）value:该属性的属性值"></a>（1）<code>value</code>:该属性的属性值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;//声明一个空对象</span><br><span class="line">obj.p = 123;//声明obj的一个属性p</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertyDescriptor(obj, &#x27;p&#x27;).value;//通过Object.getOwnPropertyDescriptor()函数获取</span><br><span class="line">//123</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj,&#x27;p&#x27;,&#123;value:456&#125;);//通过Object.defineProperty()对属性value进行修改</span><br><span class="line">//456</span><br></pre></td></tr></table></figure><h3 id="（2）writable：布尔值，决定该属性是否可改变，默认true"><a href="#（2）writable：布尔值，决定该属性是否可改变，默认true" class="headerlink" title="（2）writable：布尔值，决定该属性是否可改变，默认true"></a>（2）<code>writable</code>：布尔值，决定该属性是否可改变，默认true</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj,&#x27;a&#x27;,&#123;</span><br><span class="line">    value: 37,</span><br><span class="line">    writable: false,//修改该属性对象描述中的writable为不可修改</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.a//37</span><br><span class="line">obj.a = 23;</span><br><span class="line">//1.正常模式下上一行代码修改对象属性描述对象的writable值为false的操作不会报错，但是严格模式下任何赋值行为都会报错</span><br><span class="line">//2.接第一点如果，因为子对象继承该父对象，子对象将无法自定义这个属性，也就是说，在严格模式下，父对象定义好了writable的值而子对象修改writable的值会报错</span><br><span class="line">//3.接上面两点，有一个规避方法，就是通过覆盖属性描述对象</span><br><span class="line"></span><br><span class="line">obj.a//无法被修改，所以仍然为37</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="（3）enumerable-布尔值，表示该属性是否可遍历，默认为true"><a href="#（3）enumerable-布尔值，表示该属性是否可遍历，默认为true" class="headerlink" title="（3）enumerable:布尔值，表示该属性是否可遍历，默认为true"></a>（3）<code>enumerable</code>:布尔值，表示该属性是否可遍历，默认为true</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#x27;x&#x27;, &#123;</span><br><span class="line">  value: 123,</span><br><span class="line">  enumerable: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.x // 123</span><br><span class="line"></span><br><span class="line">for (var key in obj) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// undefined </span><br><span class="line"></span><br><span class="line">//enumerable为false，下面三个操作不会取到该属性。</span><br><span class="line"></span><br><span class="line">for..in循环(for...in循环包括继承的属性)</span><br><span class="line">Object.keys方法(Object.keys方法不包括继承的属性)</span><br><span class="line">JSON.stringify方法</span><br></pre></td></tr></table></figure><h3 id="（4）configurable-布尔值，表示该属性是否可遍历，默认为true-设置为false会使得某些操作-for-in…或者Object-keys-跳过该属性"><a href="#（4）configurable-布尔值，表示该属性是否可遍历，默认为true-设置为false会使得某些操作-for-in…或者Object-keys-跳过该属性" class="headerlink" title="（4）configurable:布尔值，表示该属性是否可遍历，默认为true,设置为false会使得某些操作(for..in…或者Object.keys())跳过该属性"></a>（4）<code>configurable</code>:布尔值，表示该属性是否可遍历，默认为true,设置为false会使得某些操作(for..in…或者Object.keys())跳过该属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//1.如果对象的属性描述对象中的configurable属性被设为了false值，那么相关的这个对象中的configurable为false时，writable、enumerable和configurable都不能被修改了。(浅不变性)</span><br><span class="line"></span><br><span class="line">//2.value属性的情况比较特殊。只要writable和configurable有一个为true，就允许改动value</span><br><span class="line"></span><br><span class="line">var obj = Object.defineProperty(&#123;&#125;, &#x27;p&#x27;, &#123;</span><br><span class="line">  value: 1,</span><br><span class="line">  writable: false,</span><br><span class="line">  enumerable: false,</span><br><span class="line">  configurable: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#x27;p&#x27;, &#123;writable: true&#125;)</span><br><span class="line">// TypeError: Cannot redefine property: p</span><br><span class="line">//3.writable属性只有在false改为true时会报错，true改为false是允许的。</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#x27;p&#x27;, &#123;enumerable: true&#125;)</span><br><span class="line">// TypeError: Cannot redefine property: p</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#x27;p&#x27;, &#123;configurable: true&#125;)</span><br><span class="line">// TypeError: Cannot redefine property: p</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#x27;p&#x27;, &#123;value: 2&#125;)</span><br><span class="line">// TypeError: Cannot redefine property: p</span><br><span class="line"></span><br><span class="line">//4.并且可配置性决定了目标属性是否可以被删除（delete），configurable是true，就可以被删除，否则就不行</span><br></pre></td></tr></table></figure><h3 id="对象常量"><a href="#对象常量" class="headerlink" title="对象常量"></a>对象常量</h3><p>也就是说，上面&#x2F;&#x2F;1.的<code>obj.p</code>属性设置成<code>writable:false,configurable:false</code>后，这个对象的这个属性就变成了常量，不可修改，不可删除，不可定义</p><h3 id="（5）存取器：get-是一个函数，表示该属性的取值函数-getter-，默认为undefined"><a href="#（5）存取器：get-是一个函数，表示该属性的取值函数-getter-，默认为undefined" class="headerlink" title="（5）存取器：get:是一个函数，表示该属性的取值函数(getter)，默认为undefined"></a>（5）存取器：<code>get</code>:是一个函数，表示该属性的取值函数(getter)，默认为undefined</h3><h3 id="set-是一个函数，表示该函数的存值函数-setter-默认为undefined"><a href="#set-是一个函数，表示该函数的存值函数-setter-默认为undefined" class="headerlink" title="set:是一个函数，表示该函数的存值函数(setter),默认为undefined"></a><code>set</code>:是一个函数，表示该函数的存值函数(setter),默认为undefined</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var obj = Object.defineProperty(&#123;&#125;, &#x27;p&#x27;, &#123;</span><br><span class="line">  get: function () &#123;</span><br><span class="line">    return &#x27;getter&#x27;;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (value) &#123;</span><br><span class="line">    console.log(&#x27;setter: &#x27; + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//1.或者</span><br><span class="line">var obj = &#123;</span><br><span class="line">    get p() &#123;</span><br><span class="line">        return &#x27;getter&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">    set p(value) &#123;</span><br><span class="line">        console.log(&#x27;setter:&#x27; + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">2.两种写法区别：第一种写法，属性p的configurable和enumerable都为false，从而导致属性p是不可遍历的；第二种写法，属性p的configurable和enumerable都为true，因此属性p是可遍历的</span><br><span class="line"></span><br><span class="line">3.实际开发中，第二种方法更加常用</span><br><span class="line"></span><br><span class="line">4.注意，取值函数get不能接受参数，存值函数set只能接受一个参数（即属性的值）</span><br><span class="line"></span><br><span class="line">obj.p // &quot;getter&quot;</span><br><span class="line">obj.p = 123 // &quot;setter: 123&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="禁止扩展"><a href="#禁止扩展" class="headerlink" title="禁止扩展"></a>禁止扩展</h3><p>如果我们不想这个对象添加更多的属性，那么可以使用Object.preventExtensions()方法禁止扩展 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;a:2&#125;;</span><br><span class="line">Object.preventExtensions(obj);</span><br><span class="line">obj.b = 2;</span><br><span class="line">obj //&#123;a:2&#125;,已经无法添加新属了</span><br></pre></td></tr></table></figure><h3 id="密封"><a href="#密封" class="headerlink" title="密封"></a>密封</h3><p>密封就是禁止扩展的升级版,Object.seal()方法使得一个对象既无法添加新属性，也无法删除旧属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: &#x27;hello&#x27; &#125;;</span><br><span class="line">Object.seal(obj);</span><br><span class="line"></span><br><span class="line">delete obj.p;</span><br><span class="line">obj.p // &quot;hello&quot;  --&gt;1.无法被删除--&gt;其实质：将该属性描述对象的configurable属性设为false</span><br><span class="line"></span><br><span class="line">obj.x = &#x27;world&#x27;;</span><br><span class="line">obj.x // undefined  --&gt;2.无法添加新属性</span><br></pre></td></tr></table></figure><h3 id="冻结"><a href="#冻结" class="headerlink" title="冻结"></a>冻结</h3><p>冻结就是密封的升级版，Object.freeze方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  p: &#x27;hello&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.freeze(obj);</span><br><span class="line"></span><br><span class="line">obj.p = &#x27;world&#x27;;</span><br><span class="line">obj.p // &quot;hello&quot; --&gt;1.修改无效--&gt;其实质：把所有属性的writable给关掉(false)</span><br><span class="line"></span><br><span class="line">obj.t = &#x27;hello&#x27;;</span><br><span class="line">obj.t // undefined --&gt;2.无法添加新属性</span><br><span class="line"></span><br><span class="line">delete obj.p // false</span><br><span class="line">obj.p // &quot;hello --&gt;3.无法删除属性</span><br></pre></td></tr></table></figure><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wangdoc.com/javascript/stdlib/attributes.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://juejin.cn/post/6898684702186717197</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前后端分部学习</title>
      <link href="/hexoblog.github.io/2022/09/15/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%83%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/hexoblog.github.io/2022/09/15/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%83%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：本来是想着补补大一大二的java后端知识，然后顺便做一做网上go相关的项目，但是现在dapp的课程貌似需要前端javaScript，ES6之类的前端知识，然后就顺便一起学了吧，重点dapp和java继续学习："><a href="#前言：本来是想着补补大一大二的java后端知识，然后顺便做一做网上go相关的项目，但是现在dapp的课程貌似需要前端javaScript，ES6之类的前端知识，然后就顺便一起学了吧，重点dapp和java继续学习：" class="headerlink" title="前言：本来是想着补补大一大二的java后端知识，然后顺便做一做网上go相关的项目，但是现在dapp的课程貌似需要前端javaScript，ES6之类的前端知识，然后就顺便一起学了吧，重点dapp和java继续学习："></a>前言：本来是想着补补大一大二的java后端知识，然后顺便做一做网上go相关的项目，但是现在dapp的课程貌似需要前端javaScript，ES6之类的前端知识，然后就顺便一起学了吧，重点dapp和java继续学习：</h1><p>修正：今天上课老师说了下技术栈是TypeScript，下来看了看这个TypeScript，说是JavaScript的超集…于是加入TypeScript，对了，忘了最重要的solidaty了</p><span id="more"></span><h2 id="javaScript快速入门："><a href="#javaScript快速入门：" class="headerlink" title="javaScript快速入门："></a>javaScript快速入门：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wangdoc.com/javascript/index.html</span><br></pre></td></tr></table></figure><h2 id="阮一峰的ES6教程"><a href="#阮一峰的ES6教程" class="headerlink" title="阮一峰的ES6教程:"></a>阮一峰的ES6教程:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://es6.ruanyifeng.com/#README</span><br></pre></td></tr></table></figure><h2 id="TypeScript入门教程："><a href="#TypeScript入门教程：" class="headerlink" title="TypeScript入门教程："></a>TypeScript入门教程：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ts.xcatliu.com/</span><br></pre></td></tr></table></figure><h2 id="Solidaty“僵尸教程”："><a href="#Solidaty“僵尸教程”：" class="headerlink" title="Solidaty“僵尸教程”："></a>Solidaty“僵尸教程”：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cryptozombies.io/</span><br></pre></td></tr></table></figure><h2 id="solodaty入门："><a href="#solodaty入门：" class="headerlink" title="solodaty入门："></a>solodaty入门：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://learnblockchain.cn/docs/solidity/introduction-to-smart-contracts.html</span><br></pre></td></tr></table></figure><h2 id="Java学习路线，这里有两个，大致差不多，我以狂神提供的路线为主，另一个辅助来看："><a href="#Java学习路线，这里有两个，大致差不多，我以狂神提供的路线为主，另一个辅助来看：" class="headerlink" title="Java学习路线，这里有两个，大致差不多，我以狂神提供的路线为主，另一个辅助来看："></a>Java学习路线，这里有两个，大致差不多，我以狂神提供的路线为主，另一个辅助来看：</h2><p>狂神说Java全栈学习路线:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_33369905/article/details/106647296</span><br></pre></td></tr></table></figure><p>Java入门学习路线目录索引（持续更新中）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://onestar.blog.csdn.net/article/details/102394373</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>了解区块链世界</title>
      <link href="/hexoblog.github.io/2022/08/27/%E4%BA%86%E8%A7%A3%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/hexoblog.github.io/2022/08/27/%E4%BA%86%E8%A7%A3%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言-学习新知识就是一个说服自己，打破自己旧的认知，然后重拾其碎片，加入其他的新的碎片最终-重组的过程"><a href="#前言-学习新知识就是一个说服自己，打破自己旧的认知，然后重拾其碎片，加入其他的新的碎片最终-重组的过程" class="headerlink" title="前言:学习新知识就是一个说服自己，打破自己旧的认知，然后重拾其碎片，加入其他的新的碎片最终 重组的过程"></a>前言:学习新知识就是一个说服自己，打破自己旧的认知，然后重拾其碎片，加入其他的新的碎片最终 重组的过程</h1><p>DAO<br>区块链预言机<br>web3.0<br>NFT<br>DAPP<br>Defi<br>Filecoin</p><span id="more"></span><hr><h1 id="DAO-Decentralized-Autonomous-Corporations-–去中心化自治组织-两篇文章入门看懂DAO"><a href="#DAO-Decentralized-Autonomous-Corporations-–去中心化自治组织-两篇文章入门看懂DAO" class="headerlink" title="DAO(Decentralized Autonomous Corporations)–去中心化自治组织,两篇文章入门看懂DAO:"></a>DAO(Decentralized Autonomous Corporations)–去中心化自治组织,两篇文章入门看懂DAO:</h1><h3 id="DAO是什么？著名的DAO项目介绍"><a href="#DAO是什么？著名的DAO项目介绍" class="headerlink" title="DAO是什么？著名的DAO项目介绍:"></a>DAO是什么？著名的DAO项目介绍:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wwsww.cn/qkl/10698.html</span><br></pre></td></tr></table></figure><h3 id="去中心化组织-DAO-科普"><a href="#去中心化组织-DAO-科普" class="headerlink" title="去中心化组织(DAO)科普"></a>去中心化组织(DAO)科普</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/364778467</span><br></pre></td></tr></table></figure><h1 id="区块链预言机"><a href="#区块链预言机" class="headerlink" title="区块链预言机"></a>区块链预言机</h1><h3 id="什么是区块链预言机"><a href="#什么是区块链预言机" class="headerlink" title="什么是区块链预言机:"></a>什么是区块链预言机:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/263565159</span><br></pre></td></tr></table></figure><h1 id="web3-0"><a href="#web3-0" class="headerlink" title="web3.0"></a>web3.0</h1><h1 id="NFT"><a href="#NFT" class="headerlink" title="NFT"></a>NFT</h1><h1 id="DAPP-Decentralized-Application-–-去中心化应用程序-两篇文章分别了解和从小白开始学习开发Dapp？"><a href="#DAPP-Decentralized-Application-–-去中心化应用程序-两篇文章分别了解和从小白开始学习开发Dapp？" class="headerlink" title="DAPP(Decentralized Application)– 去中心化应用程序,两篇文章分别了解和从小白开始学习开发Dapp？"></a>DAPP(Decentralized Application)– 去中心化应用程序,两篇文章分别了解和从小白开始学习开发Dapp？</h1><h3 id="Dapp是什么？"><a href="#Dapp是什么？" class="headerlink" title="Dapp是什么？"></a>Dapp是什么？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/99806308</span><br></pre></td></tr></table></figure><h3 id="区块链Dapp开发教程"><a href="#区块链Dapp开发教程" class="headerlink" title="区块链Dapp开发教程"></a>区块链Dapp开发教程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/README-CN.md</span><br></pre></td></tr></table></figure><h1 id="DeFi"><a href="#DeFi" class="headerlink" title="DeFi"></a>DeFi</h1><h1 id="Filecoin"><a href="#Filecoin" class="headerlink" title="Filecoin"></a>Filecoin</h1><h1 id="闪电贷科普"><a href="#闪电贷科普" class="headerlink" title="闪电贷科普:"></a>闪电贷科普:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_44383880/article/details/110412232?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166328836316782425197641%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166328836316782425197641&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110412232-null-null.142^v47^pc_rank_34_2,201^v3^control&amp;utm_term=%E9%97%AA%E7%94%B5%E8%B4%B7&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简易的比特币-区块链原型学习</title>
      <link href="/hexoblog.github.io/2022/08/21/%E7%AE%80%E6%98%93%E7%9A%84%E6%AF%94%E7%89%B9%E5%B8%81-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8E%9F%E5%9E%8B/"/>
      <url>/hexoblog.github.io/2022/08/21/%E7%AE%80%E6%98%93%E7%9A%84%E6%AF%94%E7%89%B9%E5%B8%81-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：未来虚拟世界是绝对的独立智慧体（硅基生命），加密世界是绝对的一个大势，加密货币是绝对的一个刚需存在，虽然这个未来还有不少距离，但这个未来是一座灯塔。"><a href="#前言：未来虚拟世界是绝对的独立智慧体（硅基生命），加密世界是绝对的一个大势，加密货币是绝对的一个刚需存在，虽然这个未来还有不少距离，但这个未来是一座灯塔。" class="headerlink" title="前言：未来虚拟世界是绝对的独立智慧体（硅基生命），加密世界是绝对的一个大势，加密货币是绝对的一个刚需存在，虽然这个未来还有不少距离，但这个未来是一座灯塔。"></a>前言：未来虚拟世界是绝对的独立智慧体（硅基生命），加密世界是绝对的一个大势，加密货币是绝对的一个刚需存在，虽然这个未来还有不少距离，但这个未来是一座灯塔。</h1><pre><code>                                                                 --一位优秀的网络答主</code></pre><span id="more"></span><h3 id="Go语言实现-github地址学习地址-代码"><a href="#Go语言实现-github地址学习地址-代码" class="headerlink" title="Go语言实现,github地址学习地址(代码):"></a>Go语言实现,github地址学习地址(代码):</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Jeiwan/blockchain_go.git</span><br></pre></td></tr></table></figure><h3 id="中文文档地址"><a href="#中文文档地址" class="headerlink" title="中文文档地址"></a>中文文档地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_40392981/category_11632873.html</span><br></pre></td></tr></table></figure><h3 id="生成区块链小工具："><a href="#生成区块链小工具：" class="headerlink" title="生成区块链小工具："></a>生成区块链小工具：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blockchaindemo.io/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goland文件数据库-Bolt库简单操作</title>
      <link href="/hexoblog.github.io/2022/08/20/Goland%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BA%93-Bolt%E5%BA%93%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/hexoblog.github.io/2022/08/20/Goland%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BA%93-Bolt%E5%BA%93%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="bolt简介"><a href="#bolt简介" class="headerlink" title="#bolt简介"></a>#bolt简介</h1><h4 id="bolt数据库是一个纯GO语言实现的键值对数据库，支持完全的ACID事务操作-bolt库通过使用一个内存映射的磁盘文件来管理数据，逻辑清晰，接口简单易用；相比于使用数据库连接工具类的东西比如mysql、SQlite来操作数据持久化，而是通过一个文件-bucket-来存储数据，虽然访问不够灵活，但是效率比较高，所以可以考虑用bolt库来进行测试"><a href="#bolt数据库是一个纯GO语言实现的键值对数据库，支持完全的ACID事务操作-bolt库通过使用一个内存映射的磁盘文件来管理数据，逻辑清晰，接口简单易用；相比于使用数据库连接工具类的东西比如mysql、SQlite来操作数据持久化，而是通过一个文件-bucket-来存储数据，虽然访问不够灵活，但是效率比较高，所以可以考虑用bolt库来进行测试" class="headerlink" title="bolt数据库是一个纯GO语言实现的键值对数据库，支持完全的ACID事务操作.bolt库通过使用一个内存映射的磁盘文件来管理数据，逻辑清晰，接口简单易用；相比于使用数据库连接工具类的东西比如mysql、SQlite来操作数据持久化，而是通过一个文件(bucket)来存储数据，虽然访问不够灵活，但是效率比较高，所以可以考虑用bolt库来进行测试"></a>bolt数据库是一个<strong>纯GO语言</strong>实现的<strong>键值对数据库</strong>，支持完全的ACID事务操作.bolt库通过使用一个内存映射的磁盘文件来管理数据，逻辑清晰，接口简单易用；相比于使用数据库连接工具类的东西比如mysql、SQlite来操作数据持久化，而是通过一个文件(bucket)来存储数据，虽然访问不够灵活，但是效率比较高，所以可以考虑用bolt库来进行测试</h4><span id="more"></span><h1 id="bolt安装"><a href="#bolt安装" class="headerlink" title="#bolt安装"></a>#bolt安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/boltdb/bolt</span><br></pre></td></tr></table></figure><h1 id="打开以及关闭Bolt库"><a href="#打开以及关闭Bolt库" class="headerlink" title="#打开以及关闭Bolt库"></a>#打开以及关闭Bolt库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//定义db文件名常量</span><br><span class="line">const dbFile=&quot;my.db&quot;</span><br><span class="line"></span><br><span class="line">//需要使用到的函数:func Open(path string, mode os.FileMode, options *Options) (*DB, error)</span><br><span class="line">//Open函数接受三个参数：</span><br><span class="line">  //第一个参数表示bucket路径，第二个参数表示操作方式，第三个参数表示配置信息，没有明确可以不配置，直接写nil</span><br><span class="line"></span><br><span class="line">//打开.db文件，如果不存在则创建，如果存在则打开</span><br><span class="line">db,err := bolt.Open(dbFile,0666,nil)</span><br><span class="line">    //错误处理</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(&quot;db文件查找或创建失败，请稍后重试&quot;)</span><br><span class="line">&#125;</span><br><span class="line">    //关闭</span><br><span class="line">defer db.Close()</span><br></pre></td></tr></table></figure><h1 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="#Transaction(事务)"></a>#Transaction(事务)</h1><h5 id="Bolt数据库同时只支持一个read-write-transaction或者多个read-only-transaction，一般来说read-only的transaction和read-write-transaction不应该相互之间有依赖，即同一个goroutinr中不要同时打开这两种transaction–-gt-可能会出现死锁的情况"><a href="#Bolt数据库同时只支持一个read-write-transaction或者多个read-only-transaction，一般来说read-only的transaction和read-write-transaction不应该相互之间有依赖，即同一个goroutinr中不要同时打开这两种transaction–-gt-可能会出现死锁的情况" class="headerlink" title="Bolt数据库同时只支持一个read-write transaction或者多个read-only transaction，一般来说read-only的transaction和read-write transaction不应该相互之间有依赖，即同一个goroutinr中不要同时打开这两种transaction–&gt;(可能会出现死锁的情况)"></a>Bolt数据库同时只支持一个read-write transaction或者多个read-only transaction，一般来说read-only的transaction和read-write transaction不应该相互之间有依赖，即同一个goroutinr中不要同时打开这两种transaction–&gt;(可能会出现死锁的情况)</h5><h3 id="Read-write-transactions-读写事务"><a href="#Read-write-transactions-读写事务" class="headerlink" title="Read-write transactions(读写事务)"></a>Read-write transactions(读写事务)</h3><h5 id="通过DB-Update打开一个read-write-transaction"><a href="#通过DB-Update打开一个read-write-transaction" class="headerlink" title="通过DB.Update打开一个read-write transaction:"></a>通过DB.Update打开一个read-write transaction:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义bucketName常量</span><br><span class="line">const bucketName=&quot;bucket01&quot;</span><br><span class="line"></span><br><span class="line">//db为上面通过Open()函数(打开文件)获取的操作对象</span><br><span class="line">if err:=db.Update(func(tx *bolt.Tx) error)&#123;</span><br><span class="line"></span><br><span class="line">    // CreateBucket() creates a new bucket.(bucket中的所有key必须是唯一的)</span><br><span class="line">    //在Update事务中可以更改操作(创建bucket,修改bucket中某个键的值等等)</span><br><span class="line">    if _, err = tx.CreateBucket([]byte(&quot;bucketName&quot;)); err != nil &#123;</span><br><span class="line">          logger.Log(&quot;create failed&quot;, err)</span><br><span class="line">          return err</span><br><span class="line">         &#125;</span><br><span class="line">         return nil</span><br><span class="line">&#125;);;err!=nil&#123;</span><br><span class="line">    log.panic(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read-Only-transactions（只读事务）"><a href="#Read-Only-transactions（只读事务）" class="headerlink" title="Read-Only transactions（只读事务）"></a>Read-Only transactions（只读事务）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if err := db.View(func(tx *bolt.Tx) error &#123;</span><br><span class="line">        // if _, err := tx.CreateBucket([]byte(&quot;bucketName&quot;)); err != nil &#123;</span><br><span class="line">        //  logger.Log(&quot;create failed&quot;, err)</span><br><span class="line">        //  return err</span><br><span class="line">        // &#125;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;); err != nil &#123;</span><br><span class="line">        log.panic(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="View-中不允许更改操作-只能获取bucket-查询value-复制数据库-所以上面注释代码加上会报错"><a href="#View-中不允许更改操作-只能获取bucket-查询value-复制数据库-所以上面注释代码加上会报错" class="headerlink" title="View()中不允许更改操作,只能获取bucket,查询value,复制数据库,所以上面注释代码加上会报错"></a>View()中不允许更改操作,只能获取bucket,查询value,复制数据库,所以上面注释代码加上会报错</h5><h1 id="使用key-x2F-value"><a href="#使用key-x2F-value" class="headerlink" title="#使用key&#x2F;value"></a>#使用key&#x2F;value</h1><h3 id="将一个key-x2F-value保存到bucket中-保存在bucket中的键值对是无序的-使用Bucket-Put-函数"><a href="#将一个key-x2F-value保存到bucket中-保存在bucket中的键值对是无序的-使用Bucket-Put-函数" class="headerlink" title="将一个key&#x2F;value保存到bucket中**(保存在bucket中的键值对是无序的)**,使用Bucket.Put()函数:"></a>将一个key&#x2F;value保存到bucket中**(保存在bucket中的键值对是无序的)**,使用Bucket.Put()函数:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if err:=db.Update(func(tx *bolt.Tx) error)&#123;</span><br><span class="line">    b:=tx.Bucket([]byte(bucketName))</span><br><span class="line"></span><br><span class="line">    //Put sets the value for a key in the bucket.</span><br><span class="line">    //需要传入两个字节数组,第一个字节数组作为key值,第二个字节数组作为对应key值的value值</span><br><span class="line">    err=b.Put([]byte(&quot;1&quot;),[]byte(&quot;&quot;block01))</span><br><span class="line">    return err</span><br><span class="line"></span><br><span class="line">    //return nil</span><br><span class="line">&#125;);err!=nil&#123;</span><br><span class="line">    logger.Log(&quot;update&quot;,err)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="上面代码的”1”-gt-”block01”-key-value对保存到bucket-“bucket01”中，可以使用Bucket-Get-函数获取”block01”这个值"><a href="#上面代码的”1”-gt-”block01”-key-value对保存到bucket-“bucket01”中，可以使用Bucket-Get-函数获取”block01”这个值" class="headerlink" title="上面代码的”1”-&gt;”block01” key-value对保存到bucket “bucket01”中，可以使用Bucket.Get()函数获取”block01”这个值"></a>上面代码的”1”-&gt;”block01” key-value对保存到bucket “bucket01”中，可以使用Bucket.Get()函数获取”block01”这个值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if err:=db.View(func(tx *bolt.Tx) error &#123;</span><br><span class="line"> b := tx.Bucket([]byte(&quot;bucketName&quot;))</span><br><span class="line">        //Get retrieves the value for a key in the bucket.</span><br><span class="line">        //需要一个传入类型为字节数组的&quot;key&quot;值</span><br><span class="line">        v := b.Get([]byte(&quot;1&quot;))</span><br><span class="line">        fmt.Printf(&quot;the anser is :%s\n&quot;, v)</span><br><span class="line"></span><br><span class="line">        return nil</span><br><span class="line">    &#125;); err != nil &#123;</span><br><span class="line">        logger.Log(&quot;view&quot;, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后附上一张图说明-db文件和bucket的关系"><a href="#最后附上一张图说明-db文件和bucket的关系" class="headerlink" title="#最后附上一张图说明.db文件和bucket的关系:"></a>#最后附上一张图说明.db文件和bucket的关系:</h1><img src="/hexoblog.github.io/2022/08/20/Goland%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BA%93-Bolt%E5%BA%93%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/bucket.png" class title="This is an relative image">]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单算法</title>
      <link href="/hexoblog.github.io/2022/08/06/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
      <url>/hexoblog.github.io/2022/08/06/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>二分算法<br>冒泡排序算法<br>插入排序算法<br>归并排序算法<br>快速排序算法<br>希尔排序算法</p><span id="more"></span><hr><h1 id="二分算法–时间复杂度O-logn"><a href="#二分算法–时间复杂度O-logn" class="headerlink" title="#二分算法–时间复杂度O(logn)"></a>#二分算法–时间复杂度O(logn)</h1><h3 id="二分算法不用纠结数组长度是奇数还是偶数-因为中间的数字两边的数字不一样-，只需要记住："><a href="#二分算法不用纠结数组长度是奇数还是偶数-因为中间的数字两边的数字不一样-，只需要记住：" class="headerlink" title="二分算法不用纠结数组长度是奇数还是偶数(因为中间的数字两边的数字不一样)，只需要记住："></a>二分算法不用纠结数组长度是奇数还是偶数(因为中间的数字两边的数字不一样)，只需要记住：</h3><h5 id="·只要中间数字大于目标数字，就排除右边的"><a href="#·只要中间数字大于目标数字，就排除右边的" class="headerlink" title="·只要中间数字大于目标数字，就排除右边的"></a>·只要中间数字大于目标数字，就排除右边的</h5><h5 id="·只要中间数字小于目标数字，就排除左边的"><a href="#·只要中间数字小于目标数字，就排除左边的" class="headerlink" title="·只要中间数字小于目标数字，就排除左边的"></a>·只要中间数字小于目标数字，就排除左边的</h5><h3 id="所以关键问题是中间那个数字到底该不该加入下一次的查找中，也就是边界问题中最重要的两个点："><a href="#所以关键问题是中间那个数字到底该不该加入下一次的查找中，也就是边界问题中最重要的两个点：" class="headerlink" title="所以关键问题是中间那个数字到底该不该加入下一次的查找中，也就是边界问题中最重要的两个点："></a>所以关键问题是中间那个数字到底该不该加入下一次的查找中，也就是边界问题中最重要的两个点：</h3><h5 id="·while循环中left和right的关系，到底是left-lt-x3D-right还是left-gt-right"><a href="#·while循环中left和right的关系，到底是left-lt-x3D-right还是left-gt-right" class="headerlink" title="·while循环中left和right的关系，到底是left&lt;&#x3D;right还是left&gt;right"></a>·while循环中left和right的关系，到底是left&lt;&#x3D;right还是left&gt;right</h5><h5 id="·迭代过程中middle和right的关系，到底是right-x3D-middle-1还是right-x3D-middle"><a href="#·迭代过程中middle和right的关系，到底是right-x3D-middle-1还是right-x3D-middle" class="headerlink" title="·迭代过程中middle和right的关系，到底是right&#x3D;middle-1还是right&#x3D;middle"></a>·迭代过程中middle和right的关系，到底是right&#x3D;middle-1还是right&#x3D;middle</h5><h2 id="第一种写法-左闭右闭-；"><a href="#第一种写法-左闭右闭-；" class="headerlink" title="第一种写法(左闭右闭)；"></a>第一种写法(左闭右闭)；</h2><h5 id="因为target在-left-right-区间，所以有以下两点需要注意："><a href="#因为target在-left-right-区间，所以有以下两点需要注意：" class="headerlink" title="因为target在[left,right]区间，所以有以下两点需要注意："></a>因为target在[left,right]区间，所以有以下两点需要注意：</h5><h5 id="·循环要使用while-left-lt-x3D-right-，因为当-left-x3D-x3D-right-的时候，得到的结果才是有意义的"><a href="#·循环要使用while-left-lt-x3D-right-，因为当-left-x3D-x3D-right-的时候，得到的结果才是有意义的" class="headerlink" title="·循环要使用while(left&lt;&#x3D;right)，因为当(left&#x3D;&#x3D;right)的时候，得到的结果才是有意义的"></a>·循环要使用while(left&lt;&#x3D;right)，因为当(left&#x3D;&#x3D;right)的时候，得到的结果才是有意义的</h5><h5 id="·rigth每次更新需要middle减一，left每次更新需要middle加一，更新操作时，此时的未更新的middle一定不等于target值"><a href="#·rigth每次更新需要middle减一，left每次更新需要middle加一，更新操作时，此时的未更新的middle一定不等于target值" class="headerlink" title="·rigth每次更新需要middle减一，left每次更新需要middle加一，更新操作时，此时的未更新的middle一定不等于target值"></a>·rigth每次更新需要middle减一，left每次更新需要middle加一，更新操作时，此时的未更新的middle一定不等于target值</h5><h3 id="具体代码-go-："><a href="#具体代码-go-：" class="headerlink" title="具体代码(go)："></a>具体代码(go)：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func Search(nums []int, target int) int &#123;</span><br><span class="line">    left:=0</span><br><span class="line">    right:=len(nums)-1</span><br><span class="line">    for ;left&lt;=right;&#123;</span><br><span class="line">         middle:=(left+right)/2//更新middle，取整操作</span><br><span class="line">         if target&gt;nums[middle]&#123;</span><br><span class="line">             left=middle+1//更新left</span><br><span class="line">         &#125;else if target&lt;nums[middle]&#123;</span><br><span class="line">             right=middle-1//更新right</span><br><span class="line">         &#125;else&#123;    </span><br><span class="line">         return middle</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种写法-左闭右闭-："><a href="#第二种写法-左闭右闭-：" class="headerlink" title="第二种写法(左闭右闭)："></a>第二种写法(左闭右闭)：</h2><h5 id="区间为-left-right-，所以需要注意以下两个点："><a href="#区间为-left-right-，所以需要注意以下两个点：" class="headerlink" title="区间为[left,right)，所以需要注意以下两个点："></a>区间为[left,right)，所以需要注意以下两个点：</h5><h5 id="·循环条件使用while-left-lt-right"><a href="#·循环条件使用while-left-lt-right" class="headerlink" title="·循环条件使用while(left&lt;right)"></a>·循环条件使用while(left&lt;right)</h5><h5 id="·因为更新前的nums-middle-是大于target的，-并且由于当前区间是-left-right-所以需要right-x3D-middle"><a href="#·因为更新前的nums-middle-是大于target的，-并且由于当前区间是-left-right-所以需要right-x3D-middle" class="headerlink" title="·因为更新前的nums[middle]是大于target的，,并且由于当前区间是[left,right)所以需要right&#x3D;middle"></a>·因为更新前的nums[middle]是大于target的，,并且由于当前区间是[left,right)所以需要right&#x3D;middle</h5><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func Search(nums []int, target int) int &#123;</span><br><span class="line">    left:=0</span><br><span class="line">    right:=len(nums)//区间[left,right)</span><br><span class="line">    for ;left&lt;right;&#123;</span><br><span class="line">         middle:=(left+right)/2//更新middle,取整操作</span><br><span class="line">         if target&gt;nums[middle]&#123;</span><br><span class="line">             left=middle+1//更新left</span><br><span class="line">         &#125;else if target&lt;nums[middle]&#123;</span><br><span class="line">             right=middle//更新right</span><br><span class="line">         &#125;else&#123;    </span><br><span class="line">         return middle</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：二分法最重要的两个点，就是循环条件和后续区间赋值问题"><a href="#总结：二分法最重要的两个点，就是循环条件和后续区间赋值问题" class="headerlink" title="总结：二分法最重要的两个点，就是循环条件和后续区间赋值问题"></a>总结：二分法最重要的两个点，就是循环条件和后续区间赋值问题</h2><h3 id="参考：https-blog-csdn-net-qq-45978890-article-details-116094046-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165979625416781432917995-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165979625416781432917995-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-116094046-null-null-142-v39-pc-rank-34-ctr25-185-v2-control-amp-utm-term-E4-BA-8C-E5-88-86-E6-9F-A5-E6-89-BE-amp-spm-1018-2226-3001-4187"><a href="#参考：https-blog-csdn-net-qq-45978890-article-details-116094046-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165979625416781432917995-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165979625416781432917995-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-116094046-null-null-142-v39-pc-rank-34-ctr25-185-v2-control-amp-utm-term-E4-BA-8C-E5-88-86-E6-9F-A5-E6-89-BE-amp-spm-1018-2226-3001-4187" class="headerlink" title="参考：https://blog.csdn.net/qq_45978890/article/details/116094046?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165979625416781432917995%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165979625416781432917995&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116094046-null-null.142^v39^pc_rank_34_ctr25,185^v2^control&amp;utm_term=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE&amp;spm=1018.2226.3001.4187"></a>参考：<a href="https://blog.csdn.net/qq_45978890/article/details/116094046?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165979625416781432917995%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165979625416781432917995&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116094046-null-null.142%5Ev39%5Epc_rank_34_ctr25,185%5Ev2%5Econtrol&amp;utm_term=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_45978890/article/details/116094046?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165979625416781432917995%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165979625416781432917995&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116094046-null-null.142^v39^pc_rank_34_ctr25,185^v2^control&amp;utm_term=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE&amp;spm=1018.2226.3001.4187</a></h3><hr><h1 id="冒泡排序算法–时间复杂度O-n2-–稳定算法"><a href="#冒泡排序算法–时间复杂度O-n2-–稳定算法" class="headerlink" title="冒泡排序算法–时间复杂度O(n2)–稳定算法"></a>冒泡排序算法–时间复杂度O(n2)–稳定算法</h1><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-比较相邻的元素，如果第一个比第二个大，就交换他们两个"><a href="#1-比较相邻的元素，如果第一个比第二个大，就交换他们两个" class="headerlink" title="1.比较相邻的元素，如果第一个比第二个大，就交换他们两个;"></a>1.比较相邻的元素，如果第一个比第二个大，就交换他们两个;</h5><h5 id="2-对每一对相邻元素左同样的工作，从开始第一对到结尾最后一对"><a href="#2-对每一对相邻元素左同样的工作，从开始第一对到结尾最后一对" class="headerlink" title="2.对每一对相邻元素左同样的工作，从开始第一对到结尾最后一对;"></a>2.对每一对相邻元素左同样的工作，从开始第一对到结尾最后一对;</h5><h5 id="3-针对所有的元素重复以上的步骤，除了最后一个"><a href="#3-针对所有的元素重复以上的步骤，除了最后一个" class="headerlink" title="3.针对所有的元素重复以上的步骤，除了最后一个;"></a>3.针对所有的元素重复以上的步骤，除了最后一个;</h5><h5 id="4-重复步骤1-3，直到排序完成"><a href="#4-重复步骤1-3，直到排序完成" class="headerlink" title="4.重复步骤1~3，直到排序完成."></a>4.重复步骤1~3，直到排序完成.</h5><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><h5 id="·针对所有元素重复交换步骤，除了最后一个，所以外层循环次数应该是len-nums-1"><a href="#·针对所有元素重复交换步骤，除了最后一个，所以外层循环次数应该是len-nums-1" class="headerlink" title="·针对所有元素重复交换步骤，除了最后一个，所以外层循环次数应该是len(nums)-1"></a>·针对所有元素重复交换步骤，除了最后一个，所以外层循环次数应该是len(nums)-1</h5><h5 id="·每一次最外层循环完向右移动一位时内层循环也相应需要向右移动一位，并且每一次内层循环需要从外层循环的右边一个位置开始-所以每次初始化内存循环为内存右边以外一位开始，循环次数为数组长度len-arrs-1-i-外层开始点位"><a href="#·每一次最外层循环完向右移动一位时内层循环也相应需要向右移动一位，并且每一次内层循环需要从外层循环的右边一个位置开始-所以每次初始化内存循环为内存右边以外一位开始，循环次数为数组长度len-arrs-1-i-外层开始点位" class="headerlink" title="·每一次最外层循环完向右移动一位时内层循环也相应需要向右移动一位，并且每一次内层循环需要从外层循环的右边一个位置开始,所以每次初始化内存循环为内存右边以外一位开始，循环次数为数组长度len(arrs)-1-i(外层开始点位)"></a>·每一次最外层循环完向右移动一位时内层循环也相应需要向右移动一位，并且每一次内层循环需要从外层循环的右边一个位置开始,所以每次初始化内存循环为内存右边以外一位开始，循环次数为数组长度len(arrs)-1-i(外层开始点位)</h5><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func BubbleSort(arrs *[]int) arrs []int&#123;</span><br><span class="line">    for i:=0;i&lt;len(*arrs)-1;i++&#123;</span><br><span class="line">        for j:=i+1;j&lt;len(*arrs)-1-i;j++&#123;</span><br><span class="line">            if arr[j]&gt;arr[j+1]&#123;</span><br><span class="line">                arr[j],arr[j+1]=arr[j+1],arr[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="选择排序–时间复杂度O-n2-–稳定算法"><a href="#选择排序–时间复杂度O-n2-–稳定算法" class="headerlink" title="#选择排序–时间复杂度O(n2)–稳定算法"></a>#选择排序–时间复杂度O(n2)–稳定算法</h1><h3 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-在未排序序列中找到最小-大-元素，存放到排序序列的起始位置，然后再从剩余未排序元素中继续寻找最小-大-元素，然后放到已排序序列的末尾，以此类推"><a href="#1-在未排序序列中找到最小-大-元素，存放到排序序列的起始位置，然后再从剩余未排序元素中继续寻找最小-大-元素，然后放到已排序序列的末尾，以此类推" class="headerlink" title="1.在未排序序列中找到最小(大)元素，存放到排序序列的起始位置，然后再从剩余未排序元素中继续寻找最小(大)元素，然后放到已排序序列的末尾，以此类推"></a>1.在未排序序列中找到最小(大)元素，存放到排序序列的起始位置，然后再从剩余未排序元素中继续寻找最小(大)元素，然后放到已排序序列的末尾，以此类推</h5><h5 id="2-初始状态：无序区未arr-1-n-有序区为空"><a href="#2-初始状态：无序区未arr-1-n-有序区为空" class="headerlink" title="2.初始状态：无序区未arr[1,n],有序区为空"></a>2.初始状态：无序区未arr[1,n],有序区为空</h5><h5 id="3-第i趟排序，当前有序区和无序区分别为R-1-…-i-1-和R-i-…-n-在无序区中依次比较交换，选出i位置应该最小或者最大的值，这样有序区记录个数增加一个，无序区记录格式减少一个"><a href="#3-第i趟排序，当前有序区和无序区分别为R-1-…-i-1-和R-i-…-n-在无序区中依次比较交换，选出i位置应该最小或者最大的值，这样有序区记录个数增加一个，无序区记录格式减少一个" class="headerlink" title="3.第i趟排序，当前有序区和无序区分别为R[1,…,i-1]和R(i,…,n),在无序区中依次比较交换，选出i位置应该最小或者最大的值，这样有序区记录个数增加一个，无序区记录格式减少一个"></a>3.第i趟排序，当前有序区和无序区分别为R[1,…,i-1]和R(i,…,n),在无序区中依次比较交换，选出i位置应该最小或者最大的值，这样有序区记录个数增加一个，无序区记录格式减少一个</h5><h5 id="4-n-1趟结束，数组变为有序化数组"><a href="#4-n-1趟结束，数组变为有序化数组" class="headerlink" title="4.n-1趟结束，数组变为有序化数组"></a>4.n-1趟结束，数组变为有序化数组</h5><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><h5 id="·外层有序点位只需要到n-2的位置，最后一个点位在n-2排序后就是最佳"><a href="#·外层有序点位只需要到n-2的位置，最后一个点位在n-2排序后就是最佳" class="headerlink" title="·外层有序点位只需要到n-2的位置，最后一个点位在n-2排序后就是最佳"></a>·外层有序点位只需要到n-2的位置，最后一个点位在n-2排序后就是最佳</h5><h5 id="·内层循环需要从外层循环点位的下一位开始"><a href="#·内层循环需要从外层循环点位的下一位开始" class="headerlink" title="·内层循环需要从外层循环点位的下一位开始"></a>·内层循环需要从外层循环点位的下一位开始</h5><h3 id="代码如下-以递增排序为例-："><a href="#代码如下-以递增排序为例-：" class="headerlink" title="代码如下(以递增排序为例)："></a>代码如下(以递增排序为例)：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func SelectionSort(arr []int)&#123;</span><br><span class="line">    for i:=0;i&lt;len(arr)-1;i++&#123;</span><br><span class="line">        minIndex:=i</span><br><span class="line">        for j:=i+1;j&lt;len(arr);j++&#123;</span><br><span class="line">            if arr[j]&lt;arr[minIndex]&#123; //小于--&gt;算法稳定;小于等于算法不稳定</span><br><span class="line">                minIndex=j//点位交换，在内层循环内</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i],arr[minIndex]=arr[minIndex],arr[i]//值交换在外层循环内，内层循环外</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="直接-插入排序–时间复杂度O-n2-–稳定算法"><a href="#直接-插入排序–时间复杂度O-n2-–稳定算法" class="headerlink" title="#(直接)插入排序–时间复杂度O(n2)–稳定算法"></a>#(直接)插入排序–时间复杂度O(n2)–稳定算法</h1><h3 id="算法原理-2"><a href="#算法原理-2" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-将待排序的数组分成已排序和未排序两部分，初始的时候把第一个元素认为是已经排好序的"><a href="#1-将待排序的数组分成已排序和未排序两部分，初始的时候把第一个元素认为是已经排好序的" class="headerlink" title="1.将待排序的数组分成已排序和未排序两部分，初始的时候把第一个元素认为是已经排好序的"></a>1.将待排序的数组分成已排序和未排序两部分，初始的时候把第一个元素认为是已经排好序的</h5><h5 id="2-从第二个元素开始，在已排好的的部分数组中找到适合该元素的位置并且插入"><a href="#2-从第二个元素开始，在已排好的的部分数组中找到适合该元素的位置并且插入" class="headerlink" title="2.从第二个元素开始，在已排好的的部分数组中找到适合该元素的位置并且插入"></a>2.从第二个元素开始，在已排好的的部分数组中找到适合该元素的位置并且插入</h5><h5 id="3-重复以上步骤，知道最后一个元素插入有序数组部分"><a href="#3-重复以上步骤，知道最后一个元素插入有序数组部分" class="headerlink" title="3.重复以上步骤，知道最后一个元素插入有序数组部分"></a>3.重复以上步骤，知道最后一个元素插入有序数组部分</h5><h3 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h3><h5 id="·因为默认数组第一个元素为有序数组部分，所以插入元素应该从数组第二位开始，即外层循环从数组第二位开始"><a href="#·因为默认数组第一个元素为有序数组部分，所以插入元素应该从数组第二位开始，即外层循环从数组第二位开始" class="headerlink" title="·因为默认数组第一个元素为有序数组部分，所以插入元素应该从数组第二位开始，即外层循环从数组第二位开始"></a>·因为默认数组第一个元素为有序数组部分，所以插入元素应该从数组第二位开始，即外层循环从数组第二位开始</h5><h3 id="代码如下-go-："><a href="#代码如下-go-：" class="headerlink" title="代码如下(go)："></a>代码如下(go)：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func InsertSort(arr []int)&#123;</span><br><span class="line">    for i:=1;i&lt;len(arr);i++&#123;</span><br><span class="line">        j:=i</span><br><span class="line">        for ;j&gt;0;&#123;</span><br><span class="line">            if arr[j]&lt;arr[j-1]&#123;</span><br><span class="line">                arr[j],arr[j-1]=arr[j-1],arr[j]</span><br><span class="line">                j-=1</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="归并排序-分治法-–时间复杂度O-n"><a href="#归并排序-分治法-–时间复杂度O-n" class="headerlink" title="#归并排序(分治法)–时间复杂度O(n)"></a>#归并排序(分治法)–时间复杂度O(n)</h1><h3 id="算法原理-3"><a href="#算法原理-3" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-把长度为n的输入序列分成两个长度为n-x2F-2的子序列"><a href="#1-把长度为n的输入序列分成两个长度为n-x2F-2的子序列" class="headerlink" title="1.把长度为n的输入序列分成两个长度为n&#x2F;2的子序列"></a>1.把长度为n的输入序列分成两个长度为n&#x2F;2的子序列</h5><h5 id="2-对这两个子序列分别采用重复步骤一至不可再分；"><a href="#2-对这两个子序列分别采用重复步骤一至不可再分；" class="headerlink" title="2.对这两个子序列分别采用重复步骤一至不可再分；"></a>2.对这两个子序列分别采用重复步骤一至不可再分；</h5><h5 id="3-将已排好序的子序列重新向上合并成一个完整的有序序列"><a href="#3-将已排好序的子序列重新向上合并成一个完整的有序序列" class="headerlink" title="3.将已排好序的子序列重新向上合并成一个完整的有序序列"></a>3.将已排好序的子序列重新向上合并成一个完整的有序序列</h5><h3 id="代码如下-go"><a href="#代码如下-go" class="headerlink" title="代码如下(go)"></a>代码如下(go)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//归并算法：将两个已经有序的子序列归并为一个有序的序列</span><br><span class="line">func merge(left,right []int) []int&#123;</span><br><span class="line">    result:=make([]int,0)//</span><br><span class="line">    i,j:=0,0 //左序列和右序列的初始位置</span><br><span class="line">    for i&lt;len(left)&amp;&amp;j&lt;len(right)&#123;</span><br><span class="line">        if left[i]&lt;right[j]&#123;</span><br><span class="line">            result=append(result,left[i])</span><br><span class="line">            i+=1</span><br><span class="line">            continue</span><br><span class="line">        &#125;</span><br><span class="line">        result=append(result,right[j])</span><br><span class="line">        j+=1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result=append(result,left[i:]...)</span><br><span class="line">    result=append(result,right[j:]...)</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func MergeSort(arr []int) []int&#123;</span><br><span class="line">     if len(arr)&lt;2&#123;</span><br><span class="line">        return arr</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">        i:=len(arr)/2</span><br><span class="line">        left:=MergeSort(arr[0:i])</span><br><span class="line">        right:=MergeSort(arr[i:])</span><br><span class="line">        result:=merge(left,right)</span><br><span class="line">        return right</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####################################################</p><h1 id="快速排序-分治法-–算法复杂度O-nlogn"><a href="#快速排序-分治法-–算法复杂度O-nlogn" class="headerlink" title="#快速排序(分治法)–算法复杂度O(nlogn)"></a>#快速排序(分治法)–算法复杂度O(nlogn)</h1><h3 id="算法原理-4"><a href="#算法原理-4" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-分解：先给定一个基准p-pivot-，然后根据基准p将数组arr-l-r-分区-partition-即划分为两个（可能为空）子数组A-l…p-1-和A-p-1…r-，使得A-l…p-1-中的每个元素小于等于A-p-，A-p-1…r-中的每个元素大于等于A-p-，q下标是在划分过程中计算得出的"><a href="#1-分解：先给定一个基准p-pivot-，然后根据基准p将数组arr-l-r-分区-partition-即划分为两个（可能为空）子数组A-l…p-1-和A-p-1…r-，使得A-l…p-1-中的每个元素小于等于A-p-，A-p-1…r-中的每个元素大于等于A-p-，q下标是在划分过程中计算得出的" class="headerlink" title="1.分解：先给定一个基准p(pivot)，然后根据基准p将数组arr[l,r]分区(partition),即划分为两个（可能为空）子数组A[l…p-1]和A[p+1…r]，使得A[l…p-1]中的每个元素小于等于A[p]，A[p+1…r]中的每个元素大于等于A[p]，q下标是在划分过程中计算得出的"></a>1.分解：先给定一个基准p(pivot)，然后根据基准p将数组arr[l,r]分区(partition),即划分为两个（可能为空）子数组A[l…p-1]和A[p+1…r]，使得A[l…p-1]中的每个元素小于等于A[p]，A[p+1…r]中的每个元素大于等于A[p]，q下标是在划分过程中计算得出的</h5><h5 id="2-解决：通过递归的-recursive-调用快速排序，对小于基准元素的子数组A-l…p-1-和大于基准元素的子数组A-p-1…r-进行排序"><a href="#2-解决：通过递归的-recursive-调用快速排序，对小于基准元素的子数组A-l…p-1-和大于基准元素的子数组A-p-1…r-进行排序" class="headerlink" title="2.解决：通过递归的(recursive)调用快速排序，对小于基准元素的子数组A[l…p-1]和大于基准元素的子数组A[p+1…r]进行排序"></a>2.解决：通过递归的(recursive)调用快速排序，对小于基准元素的子数组A[l…p-1]和大于基准元素的子数组A[p+1…r]进行排序</h5><h5 id="3-合并：因为两个子数组是就地排序，不需要合并操作，整个数组A-l…r-排序完成"><a href="#3-合并：因为两个子数组是就地排序，不需要合并操作，整个数组A-l…r-排序完成" class="headerlink" title="3.合并：因为两个子数组是就地排序，不需要合并操作，整个数组A[l…r]排序完成"></a>3.合并：因为两个子数组是就地排序，不需要合并操作，整个数组A[l…r]排序完成</h5><h3 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h3><h5 id="·基准点和基准值：基准点以该点左边是小于此点的值的元素值，基准值是数值与位置信息无关"><a href="#·基准点和基准值：基准点以该点左边是小于此点的值的元素值，基准值是数值与位置信息无关" class="headerlink" title="·基准点和基准值：基准点以该点左边是小于此点的值的元素值，基准值是数值与位置信息无关"></a>·基准点和基准值：基准点以该点左边是小于此点的值的元素值，基准值是数值与位置信息无关</h5><h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func QuickSort(arr []int,l int,r int)&#123;</span><br><span class="line">    if l&lt;r&#123;</span><br><span class="line">        p:=partition(arr,l,r)//基准点</span><br><span class="line">        partition(arr,l,p-1)//分区</span><br><span class="line">        partition(arr,p+1,r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func partition(arr []int, l int, r int)int&#123;</span><br><span class="line">    key:=arr[r]//以right位置上的值为基准值</span><br><span class="line">    i:=l</span><br><span class="line">    j:=l</span><br><span class="line">    for j&lt;r&#123;//j需要经过基准点前的所有数组元素。</span><br><span class="line">        if arr[j]&lt;key&#123;</span><br><span class="line">            arr[i],arr[j]=arr[j],arr[i]</span><br><span class="line">            i+=1</span><br><span class="line">        &#125;</span><br><span class="line">        j+=1</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i],arr[r]=arr[r],arr[i]</span><br><span class="line">    return i//基准点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="希尔排序–平均算法复杂度O-nlogn-–不稳定"><a href="#希尔排序–平均算法复杂度O-nlogn-–不稳定" class="headerlink" title="#希尔排序–平均算法复杂度O(nlogn)–不稳定"></a>#希尔排序–平均算法复杂度O(nlogn)–不稳定</h1><h3 id="算法原理-5"><a href="#算法原理-5" class="headerlink" title="算法原理"></a>算法原理</h3><h5 id="1-每一趟排序都需要首先定义一个增量-步长-如果起始增量-步长-定义为gap-x3D-length-x2F-2-这个增量称为希尔增量，当然增量长度可以自己定义-，那么这里每一趟的增量可以用一个序列来表示：-gap-x2F-2-gap-x2F-2-x2F-2-…-1"><a href="#1-每一趟排序都需要首先定义一个增量-步长-如果起始增量-步长-定义为gap-x3D-length-x2F-2-这个增量称为希尔增量，当然增量长度可以自己定义-，那么这里每一趟的增量可以用一个序列来表示：-gap-x2F-2-gap-x2F-2-x2F-2-…-1" class="headerlink" title="1.每一趟排序都需要首先定义一个增量(步长),如果起始增量(步长)定义为gap&#x3D;length&#x2F;2(这个增量称为希尔增量，当然增量长度可以自己定义)，那么这里每一趟的增量可以用一个序列来表示：{gap&#x2F;2,(gap&#x2F;2)&#x2F;2,…,1}"></a>1.每一趟排序都需要首先定义一个增量(步长),如果起始增量(步长)定义为gap&#x3D;length&#x2F;2(这个增量称为希尔增量，当然增量长度可以自己定义)，那么这里每一趟的增量可以用一个序列来表示：{gap&#x2F;2,(gap&#x2F;2)&#x2F;2,…,1}</h5><h5 id="2-每一趟的增量那么将整个数组分为这个增量大小的数组，然后对每一组分别进行直接插入排序，小的元素被调换到前面，然后缩小增量进行下一趟的排序"><a href="#2-每一趟的增量那么将整个数组分为这个增量大小的数组，然后对每一组分别进行直接插入排序，小的元素被调换到前面，然后缩小增量进行下一趟的排序" class="headerlink" title="2.每一趟的增量那么将整个数组分为这个增量大小的数组，然后对每一组分别进行直接插入排序，小的元素被调换到前面，然后缩小增量进行下一趟的排序"></a>2.每一趟的增量那么将整个数组分为这个增量大小的数组，然后对每一组分别进行直接插入排序，小的元素被调换到前面，然后缩小增量进行下一趟的排序</h5><h5 id="3-直到增量缩小到1时，最后对序列进行调整，整个数组排序完成"><a href="#3-直到增量缩小到1时，最后对序列进行调整，整个数组排序完成" class="headerlink" title="3.直到增量缩小到1时，最后对序列进行调整，整个数组排序完成"></a>3.直到增量缩小到1时，最后对序列进行调整，整个数组排序完成</h5><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h5 id="·数组元素个数是偶数或者奇数不影响"><a href="#·数组元素个数是偶数或者奇数不影响" class="headerlink" title="·数组元素个数是偶数或者奇数不影响"></a>·数组元素个数是偶数或者奇数不影响</h5><h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func ShellSort(arr []int) []int&#123;</span><br><span class="line">    gap:=len(arr)/2 //定义增量(步长)，向下取整</span><br><span class="line">    for gap&gt;0&#123; //gap等于1的时候是最后一次调整</span><br><span class="line">        for i:=0;i&lt;len(arr);i++&#123;</span><br><span class="line">            j:=i</span><br><span class="line">            for ((j-gap&gt;0) &amp;&amp; (arr[j]&lt;arr[j-gap]))&#123;</span><br><span class="line">                arr[j],arr[j-gap]=arr[j-gap],arr[j] //交换</span><br><span class="line">                j-=gap //跳出这一层while循环--&gt;关键点</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       gap/=2 //每一趟过后gap更新</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C-Leran-Notes</title>
      <link href="/hexoblog.github.io/2022/07/24/C-Study-Notes/"/>
      <url>/hexoblog.github.io/2022/07/24/C-Study-Notes/</url>
      
        <content type="html"><![CDATA[<h1 id="github地址"><a href="#github地址" class="headerlink" title="github地址:"></a>github地址:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Cofeesy/C-Study-notes.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker之部署我的第一个goland项目</title>
      <link href="/hexoblog.github.io/2022/07/14/docker%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAgoland%E9%A1%B9%E7%9B%AE/"/>
      <url>/hexoblog.github.io/2022/07/14/docker%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAgoland%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="失败"><a href="#失败" class="headerlink" title="失败"></a><strong>失败</strong></h1><hr><h1 id="具体失败过程（算了当日记写了）：开始想着goland有相关插件，网上搜搜知识下载好docker就可以部署了，但是这第一步就出现在这个下载安装问题上，其实下载安装到没什么问题，就是docker如果在windows运行的话需要Hyper-V虚拟机启用，我的电脑上没有显示，于是我去官网上准备下，但是官网说明到他和VMware工具是相排斥的，我索性使用VMware在linux上部署；但是问题来了，我得在linux上下载好docker，然后配置好Goland，还需要redis等的配置，到mysql配置时就出了很多问题，网上安装mysql的文章在我的linux平台上弄起来总是有些小毛病，于是前前后后回滚了好多次安装过程，让我崩溃的就是刚刚最后一次回滚的时候又误将系统yum文件删除，此时已经过去4个小时，网上又是一堆yum文件误删找回来的教学，ok，暂时与docker无缘……"><a href="#具体失败过程（算了当日记写了）：开始想着goland有相关插件，网上搜搜知识下载好docker就可以部署了，但是这第一步就出现在这个下载安装问题上，其实下载安装到没什么问题，就是docker如果在windows运行的话需要Hyper-V虚拟机启用，我的电脑上没有显示，于是我去官网上准备下，但是官网说明到他和VMware工具是相排斥的，我索性使用VMware在linux上部署；但是问题来了，我得在linux上下载好docker，然后配置好Goland，还需要redis等的配置，到mysql配置时就出了很多问题，网上安装mysql的文章在我的linux平台上弄起来总是有些小毛病，于是前前后后回滚了好多次安装过程，让我崩溃的就是刚刚最后一次回滚的时候又误将系统yum文件删除，此时已经过去4个小时，网上又是一堆yum文件误删找回来的教学，ok，暂时与docker无缘……" class="headerlink" title="具体失败过程（算了当日记写了）：开始想着goland有相关插件，网上搜搜知识下载好docker就可以部署了，但是这第一步就出现在这个下载安装问题上，其实下载安装到没什么问题，就是docker如果在windows运行的话需要Hyper-V虚拟机启用，我的电脑上没有显示，于是我去官网上准备下，但是官网说明到他和VMware工具是相排斥的，我索性使用VMware在linux上部署；但是问题来了，我得在linux上下载好docker，然后配置好Goland，还需要redis等的配置，到mysql配置时就出了很多问题，网上安装mysql的文章在我的linux平台上弄起来总是有些小毛病，于是前前后后回滚了好多次安装过程，让我崩溃的就是刚刚最后一次回滚的时候又误将系统yum文件删除，此时已经过去4个小时，网上又是一堆yum文件误删找回来的教学，ok，暂时与docker无缘……"></a>具体失败过程（算了当日记写了）：开始想着goland有相关插件，网上搜搜知识下载好docker就可以部署了，但是这第一步就出现在这个下载安装问题上，其实下载安装到没什么问题，就是docker如果在windows运行的话需要Hyper-V虚拟机启用，我的电脑上没有显示，于是我去官网上准备下，但是官网说明到他和VMware工具是相排斥的，我索性使用VMware在linux上部署；但是问题来了，我得在linux上下载好docker，然后配置好Goland，还需要redis等的配置，到mysql配置时就出了很多问题，网上安装mysql的文章在我的linux平台上弄起来总是有些小毛病，于是前前后后回滚了好多次安装过程，让我崩溃的就是刚刚最后一次回滚的时候又误将系统yum文件删除，此时已经过去4个小时，网上又是一堆yum文件误删找回来的教学，ok，暂时与docker无缘……</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 部署失败 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goland循环导包报错</title>
      <link href="/hexoblog.github.io/2022/07/13/Goland%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%8C%85%E6%8A%A5%E9%94%99/"/>
      <url>/hexoblog.github.io/2022/07/13/Goland%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%8C%85%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="goland报错：-”imiport-cycle-not-allow”-这是我今天我在goland中添加redis时遇到的一个问题，整体代码书写没有报错，但是debug就出现了这样的问题："><a href="#goland报错：-”imiport-cycle-not-allow”-这是我今天我在goland中添加redis时遇到的一个问题，整体代码书写没有报错，但是debug就出现了这样的问题：" class="headerlink" title="#goland报错：**”imiport cycle not allow”**;这是我今天我在goland中添加redis时遇到的一个问题，整体代码书写没有报错，但是debug就出现了这样的问题："></a>#goland报错：**”imiport cycle not allow”**;这是我今天我在goland中添加redis时遇到的一个问题，整体代码书写没有报错，但是debug就出现了这样的问题：</h1><span id="more"></span><img src="/hexoblog.github.io/2022/07/13/Goland%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%8C%85%E6%8A%A5%E9%94%99/redis.png" class title="This is an 报错 image"><hr><h2 id="后来发现是由于导包时因为包和代码规划有些问题，出现了cache的包需要导入config包里面的配置信息，而config包里的init-初始化函数初始化redis需要redis逻辑包里面的启动，这就导致了两个包循环导用的情况："><a href="#后来发现是由于导包时因为包和代码规划有些问题，出现了cache的包需要导入config包里面的配置信息，而config包里的init-初始化函数初始化redis需要redis逻辑包里面的启动，这就导致了两个包循环导用的情况：" class="headerlink" title="后来发现是由于导包时因为包和代码规划有些问题，出现了cache的包需要导入config包里面的配置信息，而config包里的init()初始化函数初始化redis需要redis逻辑包里面的启动，这就导致了两个包循环导用的情况："></a>后来发现是由于导包时因为包和代码规划有些问题，出现了cache的包需要导入config包里面的配置信息，而config包里的init()初始化函数初始化redis需要redis逻辑包里面的启动，这就导致了两个包循环导用的情况：</h2><img src="/hexoblog.github.io/2022/07/13/Goland%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%8C%85%E6%8A%A5%E9%94%99/config.png" class title="This is an rustBug image"><hr><h2 id="查询了下网络资料，出现这个情况大概是这样的："><a href="#查询了下网络资料，出现这个情况大概是这样的：" class="headerlink" title="查询了下网络资料，出现这个情况大概是这样的："></a>查询了下网络资料，出现这个情况大概是这样的：</h2><h3 id="golang检测出现循环导包的适合就会在编译阶段报错，通常是因为设计错误或包的规划问题：（package-C导入了package-A和package-B）"><a href="#golang检测出现循环导包的适合就会在编译阶段报错，通常是因为设计错误或包的规划问题：（package-C导入了package-A和package-B）" class="headerlink" title="golang检测出现循环导包的适合就会在编译阶段报错，通常是因为设计错误或包的规划问题：（package C导入了package A和package B）"></a>golang检测出现循环导包的适合就会在编译阶段报错，通常是因为设计错误或包的规划问题：（<code>package C</code>导入了<code>package A</code>和<code>package B</code>）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import(</span><br><span class="line">    &quot;package A&quot;</span><br><span class="line">    &quot;package B&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="而在package-A-中导入了package-C，在package-B中导入了package-C或者说在package-C依赖于package-A和package-B的情况下，package-A依赖于package-C，同时package-B依赖package-C，这个时候就会在编译时出现imiport-cycle-not-allow"><a href="#而在package-A-中导入了package-C，在package-B中导入了package-C或者说在package-C依赖于package-A和package-B的情况下，package-A依赖于package-C，同时package-B依赖package-C，这个时候就会在编译时出现imiport-cycle-not-allow" class="headerlink" title="而在package A 中导入了package C，在package B中导入了package C或者说在package C依赖于package A和package B的情况下，package A依赖于package C，同时package B依赖package C，这个时候就会在编译时出现imiport cycle not allow"></a>而在<code>package A</code> 中导入了<code>package C</code>，在<code>package B</code>中导入了<code>package C</code>或者说在<code>package C</code>依赖于<code>package A</code>和<code>package B</code>的情况下，<code>package A</code>依赖于<code>package C</code>，同时package B依赖<code>package C</code>，这个时候就会在编译时出现<code>imiport cycle not allow</code></h3><h1 id="我是如何解决呢？"><a href="#我是如何解决呢？" class="headerlink" title="#我是如何解决呢？"></a>#我是如何解决呢？</h1><h3 id="由于我的想的是config包里定义的是总体的初始化读取配置，那么就在config文件中读取redis的配置信息，然后调用cache包的初始化逻辑，这样可以减少redis的内部包的定义和减少配置函数的定义，出现这种错误后，我就将redis的读取文件操作和初始化处理逻辑和需要用到的逻辑函数单独放在了cache包，debug–-gt-成功！！！"><a href="#由于我的想的是config包里定义的是总体的初始化读取配置，那么就在config文件中读取redis的配置信息，然后调用cache包的初始化逻辑，这样可以减少redis的内部包的定义和减少配置函数的定义，出现这种错误后，我就将redis的读取文件操作和初始化处理逻辑和需要用到的逻辑函数单独放在了cache包，debug–-gt-成功！！！" class="headerlink" title="由于我的想的是config包里定义的是总体的初始化读取配置，那么就在config文件中读取redis的配置信息，然后调用cache包的初始化逻辑，这样可以减少redis的内部包的定义和减少配置函数的定义，出现这种错误后，我就将redis的读取文件操作和初始化处理逻辑和需要用到的逻辑函数单独放在了cache包，debug–&gt;成功！！！"></a>由于我的想的是config包里定义的是总体的初始化读取配置，那么就在config文件中读取redis的配置信息，然后调用cache包的初始化逻辑，这样可以减少redis的内部包的定义和减少配置函数的定义，出现这种错误后，我就将redis的读取文件操作和初始化处理逻辑和需要用到的逻辑函数单独放在了cache包，debug–&gt;成功！！！</h3><h1 id="如何避免以及出现了如何解决？"><a href="#如何避免以及出现了如何解决？" class="headerlink" title="#如何避免以及出现了如何解决？"></a>#如何避免以及出现了如何解决？</h1><h3 id="那么这个如果在设计之初规划好包是可以避免的，那难免也有出现了急待解决的时候，这里大概有两种比较好的思路："><a href="#那么这个如果在设计之初规划好包是可以避免的，那难免也有出现了急待解决的时候，这里大概有两种比较好的思路：" class="headerlink" title="那么这个如果在设计之初规划好包是可以避免的，那难免也有出现了急待解决的时候，这里大概有两种比较好的思路："></a>那么这个如果在设计之初规划好包是可以避免的，那难免也有出现了急待解决的时候，这里大概有两种比较好的思路：</h3><h4 id="1-定义接口"><a href="#1-定义接口" class="headerlink" title="1.定义接口"></a>1.定义接口</h4><h4 id="2-拆分包"><a href="#2-拆分包" class="headerlink" title="2.拆分包"></a>2.拆分包</h4><p>具体可以参考文章:(<a href="https://blog.csdn.net/ggq89/article/details/81148558?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165779514616781685373698%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165779514616781685373698&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81148558-null-null.142%5Ev32%5Epc_rank_34,185%5Ev2%5Econtrol&amp;utm_term=import%20cycle%20not%20allowed&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/ggq89/article/details/81148558?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165779514616781685373698%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165779514616781685373698&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81148558-null-null.142^v32^pc_rank_34,185^v2^control&amp;utm_term=import%20cycle%20not%20allowed&amp;spm=1018.2226.3001.4187</a>)</p>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摄影中的曝光</title>
      <link href="/hexoblog.github.io/2022/07/12/%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E6%9B%9D%E5%85%89/"/>
      <url>/hexoblog.github.io/2022/07/12/%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E6%9B%9D%E5%85%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：曝光是摄影中比较重要的知识，在我们日常生活中可以理解为光的强弱带给人眼的感受，主要呈现在画面中的明暗对比，包括熟悉的曝光三要素；理解了曝光三要素后，这样每次我们在进行拍摄以及后期处理完都可以尝试在照片合适的位置加上拍摄此照片曝光三要素的基本信息；除此外，因为我本人使用的第一台相机是一台全画幅的尼康相机，所以我会就其模式介绍每种模式对应下的功能和场景，这样会有更深的理解（本人非专业摄影）"><a href="#前言：曝光是摄影中比较重要的知识，在我们日常生活中可以理解为光的强弱带给人眼的感受，主要呈现在画面中的明暗对比，包括熟悉的曝光三要素；理解了曝光三要素后，这样每次我们在进行拍摄以及后期处理完都可以尝试在照片合适的位置加上拍摄此照片曝光三要素的基本信息；除此外，因为我本人使用的第一台相机是一台全画幅的尼康相机，所以我会就其模式介绍每种模式对应下的功能和场景，这样会有更深的理解（本人非专业摄影）" class="headerlink" title="#前言：曝光是摄影中比较重要的知识，在我们日常生活中可以理解为光的强弱带给人眼的感受，主要呈现在画面中的明暗对比，包括熟悉的曝光三要素；理解了曝光三要素后，这样每次我们在进行拍摄以及后期处理完都可以尝试在照片合适的位置加上拍摄此照片曝光三要素的基本信息；除此外，因为我本人使用的第一台相机是一台全画幅的尼康相机，所以我会就其模式介绍每种模式对应下的功能和场景，这样会有更深的理解（本人非专业摄影）"></a>#前言：曝光是摄影中比较重要的知识，在我们日常生活中可以理解为光的强弱带给人眼的感受，主要呈现在画面中的明暗对比，包括熟悉的曝光三要素；理解了曝光三要素后，这样每次我们在进行拍摄以及后期处理完都可以尝试在照片合适的位置加上拍摄此照片曝光三要素的基本信息；除此外，因为我本人使用的第一台相机是一台全画幅的尼康相机，所以我会就其模式介绍每种模式对应下的功能和场景，这样会有更深的理解（本人非专业摄影）</h1><hr><span id="more"></span><h2 id="曝光三要素：一般指的是光圈、快门、感光度ISO"><a href="#曝光三要素：一般指的是光圈、快门、感光度ISO" class="headerlink" title="#曝光三要素：一般指的是光圈、快门、感光度ISO"></a>#曝光三要素：一般指的是光圈、快门、感光度ISO</h2><hr><h3 id="光圈：光圈一般以大小来区分，它是控制照射到传感器的进光量"><a href="#光圈：光圈一般以大小来区分，它是控制照射到传感器的进光量" class="headerlink" title="光圈：光圈一般以大小来区分，它是控制照射到传感器的进光量"></a>光圈：光圈一般以大小来区分，它是控制照射到传感器的进光量</h3><h4 id="光圈的显示："><a href="#光圈的显示：" class="headerlink" title="光圈的显示："></a>光圈的显示：</h4><h5 id="“F-数字”-数字越小，光圈越大，数字越大，光圈越小；范围在F1-8-大光圈-F22-小光圈-之间"><a href="#“F-数字”-数字越小，光圈越大，数字越大，光圈越小；范围在F1-8-大光圈-F22-小光圈-之间" class="headerlink" title="“F+数字”:数字越小，光圈越大，数字越大，光圈越小；范围在F1.8(大光圈)-F22(小光圈)之间"></a>“F+数字”:数字越小，光圈越大，数字越大，光圈越小；范围在F1.8(大光圈)-F22(小光圈)之间</h5><h4 id="光圈的作用："><a href="#光圈的作用：" class="headerlink" title="光圈的作用："></a>光圈的作用：</h4><h5 id="a-调节亮度：光圈越大，进光量就越多，画面趋势于亮；反之光圈越小，进光量越少，画面趋势于暗"><a href="#a-调节亮度：光圈越大，进光量就越多，画面趋势于亮；反之光圈越小，进光量越少，画面趋势于暗" class="headerlink" title="a.调节亮度：光圈越大，进光量就越多，画面趋势于亮；反之光圈越小，进光量越少，画面趋势于暗"></a>a.调节亮度：光圈越大，进光量就越多，画面趋势于亮；反之光圈越小，进光量越少，画面趋势于暗</h5><h5 id="b-调节景深：光圈越大，景深越浅，突出主体，背景越模糊；光圈越小，景深越深，背景越清晰"><a href="#b-调节景深：光圈越大，景深越浅，突出主体，背景越模糊；光圈越小，景深越深，背景越清晰" class="headerlink" title="b.调节景深：光圈越大，景深越浅，突出主体，背景越模糊；光圈越小，景深越深，背景越清晰"></a>b.调节景深：光圈越大，景深越浅，突出主体，背景越模糊；光圈越小，景深越深，背景越清晰</h5><h4 id="光圈调节："><a href="#光圈调节：" class="headerlink" title="光圈调节："></a>光圈调节：</h4><h5 id="主要是在A挡（Av档）光圈优先模式下和M挡模式下调节"><a href="#主要是在A挡（Av档）光圈优先模式下和M挡模式下调节" class="headerlink" title="主要是在A挡（Av档）光圈优先模式下和M挡模式下调节"></a>主要是在A挡（Av档）光圈优先模式下和M挡模式下调节</h5><h4 id="光圈应用"><a href="#光圈应用" class="headerlink" title="光圈应用:"></a>光圈应用:</h4><h5 id="大光圈-适合拍摄想突出主体的物体或人-虚化效果-也适合弱光环境"><a href="#大光圈-适合拍摄想突出主体的物体或人-虚化效果-也适合弱光环境" class="headerlink" title="大光圈:适合拍摄想突出主体的物体或人(虚化效果),也适合弱光环境"></a>大光圈:适合拍摄想突出主体的物体或人(虚化效果),也适合弱光环境</h5><h5 id="小光圈-适合拍整个场景时-减小虚化和景深-也适合拍整个星空和灯光或车的轨迹"><a href="#小光圈-适合拍整个场景时-减小虚化和景深-也适合拍整个星空和灯光或车的轨迹" class="headerlink" title="小光圈:适合拍整个场景时(减小虚化和景深),也适合拍整个星空和灯光或车的轨迹"></a>小光圈:适合拍整个场景时(减小虚化和景深),也适合拍整个星空和灯光或车的轨迹</h5><hr><h3 id="快门-快门速度-：光线照射传感器的持续时间，一般以快门衡量"><a href="#快门-快门速度-：光线照射传感器的持续时间，一般以快门衡量" class="headerlink" title="快门(快门速度)：光线照射传感器的持续时间，一般以快门衡量"></a>快门(快门速度)：光线照射传感器的持续时间，一般以快门衡量</h3><h4 id="快门的显示"><a href="#快门的显示" class="headerlink" title="快门的显示:"></a>快门的显示:</h4><img src="/hexoblog.github.io/2022/07/12/%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E6%9B%9D%E5%85%89/%E5%BF%AB%E9%97%A801.png" class title="This is an 快门 image"><h5 id="（如上图，以我的D610为例-标注红圈为快门速度）"><a href="#（如上图，以我的D610为例-标注红圈为快门速度）" class="headerlink" title="（如上图，以我的D610为例,标注红圈为快门速度）"></a>（如上图，以我的D610为例,标注红圈为快门速度）</h5><h3 id="快门的作用："><a href="#快门的作用：" class="headerlink" title="快门的作用："></a>快门的作用：</h3><h5 id="a-调节亮度：快门速度越快，画面越暗；快门速度越慢，画面越亮"><a href="#a-调节亮度：快门速度越快，画面越暗；快门速度越慢，画面越亮" class="headerlink" title="a.调节亮度：快门速度越快，画面越暗；快门速度越慢，画面越亮"></a>a.调节亮度：快门速度越快，画面越暗；快门速度越慢，画面越亮</h5><h5 id="b-控制动态影像的成像效果-快门速度越快，则拍摄运动的物体就越清晰（适合拍高速运动的物体，如运动员之类的）；快门速度越慢，则拍摄运动的物体就越模糊（雾化的流水或者星空的轨迹）"><a href="#b-控制动态影像的成像效果-快门速度越快，则拍摄运动的物体就越清晰（适合拍高速运动的物体，如运动员之类的）；快门速度越慢，则拍摄运动的物体就越模糊（雾化的流水或者星空的轨迹）" class="headerlink" title="b.控制动态影像的成像效果:快门速度越快，则拍摄运动的物体就越清晰（适合拍高速运动的物体，如运动员之类的）；快门速度越慢，则拍摄运动的物体就越模糊（雾化的流水或者星空的轨迹）"></a>b.控制动态影像的成像效果:快门速度越快，则拍摄运动的物体就越清晰（适合拍高速运动的物体，如运动员之类的）；快门速度越慢，则拍摄运动的物体就越模糊（雾化的流水或者星空的轨迹）</h5><h4 id="快门的调节："><a href="#快门的调节：" class="headerlink" title="快门的调节："></a>快门的调节：</h4><h5 id="主要在S档（Tv档）快门优先模式或者M档手动模式调节快门速度"><a href="#主要在S档（Tv档）快门优先模式或者M档手动模式调节快门速度" class="headerlink" title="主要在S档（Tv档）快门优先模式或者M档手动模式调节快门速度"></a>主要在S档（Tv档）快门优先模式或者M档手动模式调节快门速度</h5><h4 id="快门应用："><a href="#快门应用：" class="headerlink" title="快门应用："></a>快门应用：</h4><h5 id="快门速度快（清晰）：定格瞬间，拍摄高速运动的物体"><a href="#快门速度快（清晰）：定格瞬间，拍摄高速运动的物体" class="headerlink" title="快门速度快（清晰）：定格瞬间，拍摄高速运动的物体"></a>快门速度快（清晰）：定格瞬间，拍摄高速运动的物体</h5><h5 id="快门速度慢（模糊）：记录轨迹，拍摄瀑布或者星空"><a href="#快门速度慢（模糊）：记录轨迹，拍摄瀑布或者星空" class="headerlink" title="快门速度慢（模糊）：记录轨迹，拍摄瀑布或者星空"></a>快门速度慢（模糊）：记录轨迹，拍摄瀑布或者星空</h5><hr><h3 id="感光度ISO：传感器对光线的敏感程度"><a href="#感光度ISO：传感器对光线的敏感程度" class="headerlink" title="感光度ISO：传感器对光线的敏感程度"></a>感光度ISO：传感器对光线的敏感程度</h3><h4 id="感光度的显示："><a href="#感光度的显示：" class="headerlink" title="感光度的显示："></a>感光度的显示：</h4><img src="/hexoblog.github.io/2022/07/12/%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E6%9B%9D%E5%85%89/%E6%84%9F%E5%85%89%E5%BA%A6.png" class title="This is an 感光度 image"><h5 id="如上图所标-，用”ISO-数字”表示，数字越大，感光度越高；数字越小感光度越小"><a href="#如上图所标-，用”ISO-数字”表示，数字越大，感光度越高；数字越小感光度越小" class="headerlink" title="(如上图所标)，用”ISO+数字”表示，数字越大，感光度越高；数字越小感光度越小"></a>(如上图所标)，用”ISO+数字”表示，数字越大，感光度越高；数字越小感光度越小</h5><h4 id="感光度作用："><a href="#感光度作用：" class="headerlink" title="感光度作用："></a>感光度作用：</h4><h5 id="a-调节亮度：感光度越高，画面越亮；感光度越低，画面越暗"><a href="#a-调节亮度：感光度越高，画面越亮；感光度越低，画面越暗" class="headerlink" title="a.调节亮度：感光度越高，画面越亮；感光度越低，画面越暗"></a>a.调节亮度：感光度越高，画面越亮；感光度越低，画面越暗</h5><h5 id="b-影响噪点（画质）：感光度越高，噪点越多，画质越粗糙；感光度越低，噪点越少，画质越细腻"><a href="#b-影响噪点（画质）：感光度越高，噪点越多，画质越粗糙；感光度越低，噪点越少，画质越细腻" class="headerlink" title="b.影响噪点（画质）：感光度越高，噪点越多，画质越粗糙；感光度越低，噪点越少，画质越细腻"></a>b.影响噪点（画质）：感光度越高，噪点越多，画质越粗糙；感光度越低，噪点越少，画质越细腻</h5><h4 id="感光度的应用："><a href="#感光度的应用：" class="headerlink" title="感光度的应用："></a>感光度的应用：</h4><h5 id="低感光度（相对细腻）：适合风光或者和高质量的印刷作品，并且在室外光线充足的情况下使用"><a href="#低感光度（相对细腻）：适合风光或者和高质量的印刷作品，并且在室外光线充足的情况下使用" class="headerlink" title="低感光度（相对细腻）：适合风光或者和高质量的印刷作品，并且在室外光线充足的情况下使用"></a>低感光度（相对细腻）：适合风光或者和高质量的印刷作品，并且在室外光线充足的情况下使用</h5><h5 id="高感光度（相对粗糙）：在一些画面较暗需要高速抓拍时可以使用，夜景或者雾景可以使用"><a href="#高感光度（相对粗糙）：在一些画面较暗需要高速抓拍时可以使用，夜景或者雾景可以使用" class="headerlink" title="高感光度（相对粗糙）：在一些画面较暗需要高速抓拍时可以使用，夜景或者雾景可以使用"></a>高感光度（相对粗糙）：在一些画面较暗需要高速抓拍时可以使用，夜景或者雾景可以使用</h5><hr><h3 id="三要素的搭配"><a href="#三要素的搭配" class="headerlink" title="三要素的搭配"></a>三要素的搭配</h3><h3 id="曝光补偿：曝光补偿是一种控制方式，在非手动曝光模式下，可以通过曝光补偿自动调节曝光参数，增加曝光则相片明亮，反之则暗"><a href="#曝光补偿：曝光补偿是一种控制方式，在非手动曝光模式下，可以通过曝光补偿自动调节曝光参数，增加曝光则相片明亮，反之则暗" class="headerlink" title="曝光补偿：曝光补偿是一种控制方式，在非手动曝光模式下，可以通过曝光补偿自动调节曝光参数，增加曝光则相片明亮，反之则暗"></a>曝光补偿：曝光补偿是一种控制方式，在非手动曝光模式下，可以通过曝光补偿自动调节曝光参数，增加曝光则相片明亮，反之则暗</h3><hr><h3 id="尼康D610的所有模式"><a href="#尼康D610的所有模式" class="headerlink" title="尼康D610的所有模式"></a>尼康D610的所有模式</h3><h4 id="P档："><a href="#P档：" class="headerlink" title="P档："></a>P档：</h4><h4 id="S档："><a href="#S档：" class="headerlink" title="S档："></a>S档：</h4><h4 id="A档："><a href="#A档：" class="headerlink" title="A档："></a>A档：</h4><h4 id="M档："><a href="#M档：" class="headerlink" title="M档："></a>M档：</h4><h4 id="u2："><a href="#u2：" class="headerlink" title="u2："></a>u2：</h4><h4 id="u1："><a href="#u1：" class="headerlink" title="u1："></a>u1：</h4><h4 id="SCENE："><a href="#SCENE：" class="headerlink" title="SCENE："></a>SCENE：</h4><h4 id="⚡："><a href="#⚡：" class="headerlink" title="⚡："></a>⚡：</h4><h4 id="AUTO："><a href="#AUTO：" class="headerlink" title="AUTO："></a>AUTO：</h4><h4 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h4><h4 id="CL"><a href="#CL" class="headerlink" title="CL:"></a>CL:</h4><h4 id="CH"><a href="#CH" class="headerlink" title="CH:"></a>CH:</h4><h4 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h4><h4 id="Qc"><a href="#Qc" class="headerlink" title="Qc:"></a>Qc:</h4><h4 id="⏰："><a href="#⏰：" class="headerlink" title="⏰："></a>⏰：</h4><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="Mup："><a href="#Mup：" class="headerlink" title="Mup："></a>Mup：</h4>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影三要素 曝光 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈摄影中的光线</title>
      <link href="/hexoblog.github.io/2022/07/10/%E8%B0%88%E8%B0%88%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E5%85%89%E7%BA%BF/"/>
      <url>/hexoblog.github.io/2022/07/10/%E8%B0%88%E8%B0%88%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E5%85%89%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：此篇大概从五个方面总结深入摄影需要了解的光线知识，涵盖面比较广，可能比较书面化，需要动手实践去用相机捕捉然后适当提升自己的审美才会有更深的体会"><a href="#前言：此篇大概从五个方面总结深入摄影需要了解的光线知识，涵盖面比较广，可能比较书面化，需要动手实践去用相机捕捉然后适当提升自己的审美才会有更深的体会" class="headerlink" title="#前言：此篇大概从五个方面总结深入摄影需要了解的光线知识，涵盖面比较广，可能比较书面化，需要动手实践去用相机捕捉然后适当提升自己的审美才会有更深的体会"></a>#前言：此篇大概从五个方面总结深入摄影需要了解的光线知识，涵盖面比较广，可能比较书面化，需要动手实践去用相机捕捉然后适当提升自己的审美才会有更深的体会</h1><span id="more"></span><h2 id="强度"><a href="#强度" class="headerlink" title="强度"></a>强度</h2><h4 id="强光：泛指光线很强的光，亮度比较大，照射物体会形成强烈的阴影，拍摄效果比较清晰，结合较暗的背景可以凸显主体"><a href="#强光：泛指光线很强的光，亮度比较大，照射物体会形成强烈的阴影，拍摄效果比较清晰，结合较暗的背景可以凸显主体" class="headerlink" title="强光：泛指光线很强的光，亮度比较大，照射物体会形成强烈的阴影，拍摄效果比较清晰，结合较暗的背景可以凸显主体"></a>强光：泛指光线很强的光，亮度比较大，照射物体会形成强烈的阴影，拍摄效果比较清晰，结合较暗的背景可以凸显主体</h4><h4 id="弱光：泛指光线较弱的光，比较柔和，适合拍氛围感的照片"><a href="#弱光：泛指光线较弱的光，比较柔和，适合拍氛围感的照片" class="headerlink" title="弱光：泛指光线较弱的光，比较柔和，适合拍氛围感的照片"></a>弱光：泛指光线较弱的光，比较柔和，适合拍氛围感的照片</h4><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h4 id="暖光：颜色偏红黄的光，大概在3000k以下，给人以温暖的感觉"><a href="#暖光：颜色偏红黄的光，大概在3000k以下，给人以温暖的感觉" class="headerlink" title="暖光：颜色偏红黄的光，大概在3000k以下，给人以温暖的感觉"></a>暖光：颜色偏红黄的光，大概在3000k以下，给人以温暖的感觉</h4><h4 id="冷光：颜色偏青蓝的光，大概在色温超过5000k，有清冷的感觉"><a href="#冷光：颜色偏青蓝的光，大概在色温超过5000k，有清冷的感觉" class="headerlink" title="冷光：颜色偏青蓝的光，大概在色温超过5000k，有清冷的感觉"></a>冷光：颜色偏青蓝的光，大概在色温超过5000k，有清冷的感觉</h4><h2 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h2><h4 id="自然光：泛指大自然当中的光线，常见的比如日光和月光，通常自然光拍摄能够还原场景的真实氛围"><a href="#自然光：泛指大自然当中的光线，常见的比如日光和月光，通常自然光拍摄能够还原场景的真实氛围" class="headerlink" title="自然光：泛指大自然当中的光线，常见的比如日光和月光，通常自然光拍摄能够还原场景的真实氛围"></a>自然光：泛指大自然当中的光线，常见的比如日光和月光，通常自然光拍摄能够还原场景的真实氛围</h4><h4 id="环境光：指拍摄环境中自然存在的光，包括自然光（区别–-gt-包含关系）以及室内的照明光等"><a href="#环境光：指拍摄环境中自然存在的光，包括自然光（区别–-gt-包含关系）以及室内的照明光等" class="headerlink" title="环境光：指拍摄环境中自然存在的光，包括自然光（区别–&gt;包含关系）以及室内的照明光等"></a>环境光：指拍摄环境中自然存在的光，包括自然光（区别–&gt;包含关系）以及室内的照明光等</h4><h4 id="人造光：拍摄者有意制造并加入拍摄的光，泛指设备产生的光，比如闪光灯，日光灯等"><a href="#人造光：拍摄者有意制造并加入拍摄的光，泛指设备产生的光，比如闪光灯，日光灯等" class="headerlink" title="人造光：拍摄者有意制造并加入拍摄的光，泛指设备产生的光，比如闪光灯，日光灯等"></a>人造光：拍摄者有意制造并加入拍摄的光，泛指设备产生的光，比如闪光灯，日光灯等</h4><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><h4 id="顺光-也叫正面光，从正面照射到被摄物体的光，受光主体部分会受到比较均匀的照明，影调比较柔和，，对于被摄物体的细节和色彩部分捕捉比较好，但是立体感较差"><a href="#顺光-也叫正面光，从正面照射到被摄物体的光，受光主体部分会受到比较均匀的照明，影调比较柔和，，对于被摄物体的细节和色彩部分捕捉比较好，但是立体感较差" class="headerlink" title="顺光:也叫正面光，从正面照射到被摄物体的光，受光主体部分会受到比较均匀的照明，影调比较柔和，，对于被摄物体的细节和色彩部分捕捉比较好，但是立体感较差"></a>顺光:也叫正面光，从正面照射到被摄物体的光，受光主体部分会受到比较均匀的照明，影调比较柔和，，对于被摄物体的细节和色彩部分捕捉比较好，但是立体感较差</h4><h4 id="侧光：从侧面照射被摄物体的光，明暗变化比较好，会使画面有一种很强的立体感和造型感，适合人像摄影–-gt-可以更直观的体现人物的情绪和性格"><a href="#侧光：从侧面照射被摄物体的光，明暗变化比较好，会使画面有一种很强的立体感和造型感，适合人像摄影–-gt-可以更直观的体现人物的情绪和性格" class="headerlink" title="侧光：从侧面照射被摄物体的光，明暗变化比较好，会使画面有一种很强的立体感和造型感，适合人像摄影–&gt;可以更直观的体现人物的情绪和性格"></a>侧光：从侧面照射被摄物体的光，明暗变化比较好，会使画面有一种很强的立体感和造型感，适合人像摄影–&gt;可以更直观的体现人物的情绪和性格</h4><h4 id="逆光：从被摄物体订单背面照射的光，又称轮廓光，可以强调被摄主体的轮廓和线条感"><a href="#逆光：从被摄物体订单背面照射的光，又称轮廓光，可以强调被摄主体的轮廓和线条感" class="headerlink" title="逆光：从被摄物体订单背面照射的光，又称轮廓光，可以强调被摄主体的轮廓和线条感"></a>逆光：从被摄物体订单背面照射的光，又称轮廓光，可以强调被摄主体的轮廓和线条感</h4><h4 id="顶光：从顶部直射的光，如果在顶光条件下拍摄人物，会产生大面积的奇特阴影效果，不利于塑造美感"><a href="#顶光：从顶部直射的光，如果在顶光条件下拍摄人物，会产生大面积的奇特阴影效果，不利于塑造美感" class="headerlink" title="顶光：从顶部直射的光，如果在顶光条件下拍摄人物，会产生大面积的奇特阴影效果，不利于塑造美感"></a>顶光：从顶部直射的光，如果在顶光条件下拍摄人物，会产生大面积的奇特阴影效果，不利于塑造美感</h4><img src="/hexoblog.github.io/2022/07/10/%E8%B0%88%E8%B0%88%E6%91%84%E5%BD%B1%E4%B8%AD%E7%9A%84%E5%85%89%E7%BA%BF/%E5%85%89%E7%9A%84%E6%96%B9%E5%90%91.JPG" class title="This is an 方向 image"><h2 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h2><h4 id="硬光：泛指直接照射的光，容易形成强烈阴影，如舞台的追光灯，一般避免用于拍人像"><a href="#硬光：泛指直接照射的光，容易形成强烈阴影，如舞台的追光灯，一般避免用于拍人像" class="headerlink" title="硬光：泛指直接照射的光，容易形成强烈阴影，如舞台的追光灯，一般避免用于拍人像"></a>硬光：泛指直接照射的光，容易形成强烈阴影，如舞台的追光灯，一般避免用于拍人像</h4><h4 id="柔光：一般指非直射的光线，光线通过一定阻挡再散发出来的光，例如阴天的情况，相对柔和，适合人像拍摄"><a href="#柔光：一般指非直射的光线，光线通过一定阻挡再散发出来的光，例如阴天的情况，相对柔和，适合人像拍摄" class="headerlink" title="柔光：一般指非直射的光线，光线通过一定阻挡再散发出来的光，例如阴天的情况，相对柔和，适合人像拍摄"></a>柔光：一般指非直射的光线，光线通过一定阻挡再散发出来的光，例如阴天的情况，相对柔和，适合人像拍摄</h4>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 光线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测光和对焦</title>
      <link href="/hexoblog.github.io/2022/07/10/%E6%B5%8B%E5%85%89%E5%92%8C%E5%AF%B9%E7%84%A6/"/>
      <url>/hexoblog.github.io/2022/07/10/%E6%B5%8B%E5%85%89%E5%92%8C%E5%AF%B9%E7%84%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="测光"><a href="#测光" class="headerlink" title="#测光"></a>#测光</h2><h4 id="评价测光：矩阵测光，常用，适用于多数场景，结合画面中各部分光线情况给出合适的曝光值（适合风光，人像）"><a href="#评价测光：矩阵测光，常用，适用于多数场景，结合画面中各部分光线情况给出合适的曝光值（适合风光，人像）" class="headerlink" title="评价测光：矩阵测光，常用，适用于多数场景，结合画面中各部分光线情况给出合适的曝光值（适合风光，人像）"></a>评价测光：矩阵测光，常用，适用于多数场景，结合画面中各部分光线情况给出合适的曝光值（适合风光，人像）</h4><span id="more"></span><h4 id="点测光：选取画面中1-3-的区域作为测光对象，常用于拍剪影等大光比画面"><a href="#点测光：选取画面中1-3-的区域作为测光对象，常用于拍剪影等大光比画面" class="headerlink" title="点测光：选取画面中1%-3%的区域作为测光对象，常用于拍剪影等大光比画面"></a>点测光：选取画面中1%-3%的区域作为测光对象，常用于拍剪影等大光比画面</h4><h4 id="局部测光：选取画面中9-的区域作为测光对象，它的测光对象只有画面中心的一部份区域，不够灵活，较少用"><a href="#局部测光：选取画面中9-的区域作为测光对象，它的测光对象只有画面中心的一部份区域，不够灵活，较少用" class="headerlink" title="局部测光：选取画面中9%的区域作为测光对象，它的测光对象只有画面中心的一部份区域，不够灵活，较少用"></a>局部测光：选取画面中9%的区域作为测光对象，它的测光对象只有画面中心的一部份区域，不够灵活，较少用</h4><h4 id="中央重点测光：在局部测光模式的基础上兼顾中心四周其他区域"><a href="#中央重点测光：在局部测光模式的基础上兼顾中心四周其他区域" class="headerlink" title="中央重点测光：在局部测光模式的基础上兼顾中心四周其他区域"></a>中央重点测光：在局部测光模式的基础上兼顾中心四周其他区域</h4><h2 id="对焦"><a href="#对焦" class="headerlink" title="# 对焦"></a># 对焦</h2><h4 id="手动对焦：手动转动镜头对焦环进行对焦"><a href="#手动对焦：手动转动镜头对焦环进行对焦" class="headerlink" title="手动对焦：手动转动镜头对焦环进行对焦"></a>手动对焦：手动转动镜头对焦环进行对焦</h4><h4 id="自动对焦："><a href="#自动对焦：" class="headerlink" title="自动对焦："></a>自动对焦：</h4><h5 id="01-AF-S：单次自动对焦，完成对焦后，半按快门不放，则对焦点不变，常用于拍静止物体"><a href="#01-AF-S：单次自动对焦，完成对焦后，半按快门不放，则对焦点不变，常用于拍静止物体" class="headerlink" title="01 AF-S：单次自动对焦，完成对焦后，半按快门不放，则对焦点不变，常用于拍静止物体"></a>01 AF-S：单次自动对焦，完成对焦后，半按快门不放，则对焦点不变，<strong>常用于拍静止物体</strong></h5><h5 id="02-AF-C：，半按快门状态下，对焦点会持续对焦，常用于拍摄运动物体"><a href="#02-AF-C：，半按快门状态下，对焦点会持续对焦，常用于拍摄运动物体" class="headerlink" title="02 AF-C：，半按快门状态下，对焦点会持续对焦，常用于拍摄运动物体"></a>02 AF-C：，半按快门状态下，对焦点会持续对焦，<strong>常用于拍摄运动物体</strong></h5><h5 id="03-AF-A：AF-S和AF-C结合，相机根据被摄物体是否运动而自动在AF-S和AF-C之间切换模式"><a href="#03-AF-A：AF-S和AF-C结合，相机根据被摄物体是否运动而自动在AF-S和AF-C之间切换模式" class="headerlink" title="03 AF-A：AF-S和AF-C结合，相机根据被摄物体是否运动而自动在AF-S和AF-C之间切换模式"></a>03 AF-A：AF-S和AF-C结合，相机根据被摄物体是否运动而自动在AF-S和AF-C之间切换模式</h5>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·对焦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相机参数</title>
      <link href="/hexoblog.github.io/2022/07/10/%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/"/>
      <url>/hexoblog.github.io/2022/07/10/%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="相机存储模式"><a href="#相机存储模式" class="headerlink" title="相机存储模式"></a>相机存储模式</h2><h4 id="JPEG-常用相片存储格式，直出常用，有损压缩，非原始数据，后期空间较小"><a href="#JPEG-常用相片存储格式，直出常用，有损压缩，非原始数据，后期空间较小" class="headerlink" title="JPEG:常用相片存储格式，直出常用，有损压缩，非原始数据，后期空间较小"></a>JPEG:常用相片存储格式，直出常用，有损压缩，非原始数据，后期空间较小</h4><h4 id="RAW：未经处理和压缩的原始数据，后期空间大，文件较大"><a href="#RAW：未经处理和压缩的原始数据，后期空间大，文件较大" class="headerlink" title="RAW：未经处理和压缩的原始数据，后期空间大，文件较大"></a>RAW：未经处理和压缩的原始数据，后期空间大，文件较大</h4><span id="more"></span><h2 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h2> <img src="/hexoblog.github.io/2022/07/10/%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4.png" class title="This is an 色彩空间 image"><h4 id="SRGB：常用，大部分显示器的色彩标准，网络传播可用此参数"><a href="#SRGB：常用，大部分显示器的色彩标准，网络传播可用此参数" class="headerlink" title="SRGB：常用，大部分显示器的色彩标准，网络传播可用此参数"></a>SRGB：常用，大部分显示器的色彩标准，网络传播可用此参数</h4><h4 id="Adobe-EGB：少用，常用于打印、印刷出版等，再常用显示器上显示会有色差"><a href="#Adobe-EGB：少用，常用于打印、印刷出版等，再常用显示器上显示会有色差" class="headerlink" title="Adobe EGB：少用，常用于打印、印刷出版等，再常用显示器上显示会有色差"></a>Adobe EGB：少用，常用于打印、印刷出版等，再常用显示器上显示会有色差</h4><h2 id="白平衡（相机上表示AWB，单位是K）"><a href="#白平衡（相机上表示AWB，单位是K）" class="headerlink" title="白平衡（相机上表示AWB，单位是K）"></a>白平衡（相机上表示AWB，单位是K）</h2><h4 id="还原被摄物体再不同光线下的原有色彩，使其与人眼所见相近，简而言之，就是无论环境光线如何影响白色，相机仍然能还原”白色”的一种功能"><a href="#还原被摄物体再不同光线下的原有色彩，使其与人眼所见相近，简而言之，就是无论环境光线如何影响白色，相机仍然能还原”白色”的一种功能" class="headerlink" title="还原被摄物体再不同光线下的原有色彩，使其与人眼所见相近，简而言之，就是无论环境光线如何影响白色，相机仍然能还原”白色”的一种功能"></a>还原被摄物体再不同光线下的原有色彩，使其与人眼所见相近，简而言之，就是无论环境光线如何影响白色，相机仍然能还原”白色”的一种功能</h4><h4 id="k值越大，色调越暖，适合拍摄温暖、安静氛围；k值越小，色调越冷，适合拍摄清冷情绪（具体视情况而定，仅供参考）："><a href="#k值越大，色调越暖，适合拍摄温暖、安静氛围；k值越小，色调越冷，适合拍摄清冷情绪（具体视情况而定，仅供参考）：" class="headerlink" title="k值越大，色调越暖，适合拍摄温暖、安静氛围；k值越小，色调越冷，适合拍摄清冷情绪（具体视情况而定，仅供参考）："></a>k值越大，色调越暖，适合拍摄温暖、安静氛围；k值越小，色调越冷，适合拍摄清冷情绪（具体视情况而定，仅供参考）：</h4><h2 id="相片风格："><a href="#相片风格：" class="headerlink" title="相片风格："></a>相片风格：</h2><h4 id="种类："><a href="#种类：" class="headerlink" title="种类："></a>种类：</h4><h5 id="01-标准：对相片做轻微的处理适当提高饱和度和锐度"><a href="#01-标准：对相片做轻微的处理适当提高饱和度和锐度" class="headerlink" title="01 标准：对相片做轻微的处理适当提高饱和度和锐度"></a>01 标准：对相片做轻微的处理适当提高饱和度和锐度</h5><h5 id="02-人像：注重肤色的表现，进行轻微的锐化"><a href="#02-人像：注重肤色的表现，进行轻微的锐化" class="headerlink" title="02 人像：注重肤色的表现，进行轻微的锐化"></a>02 人像：注重肤色的表现，进行轻微的锐化</h5><h5 id="03-风光：强化蓝色和绿色，进行较大幅度锐化"><a href="#03-风光：强化蓝色和绿色，进行较大幅度锐化" class="headerlink" title="03 风光：强化蓝色和绿色，进行较大幅度锐化"></a>03 风光：强化蓝色和绿色，进行较大幅度锐化</h5><h5 id="04单色：将相片转为黑色"><a href="#04单色：将相片转为黑色" class="headerlink" title="04单色：将相片转为黑色"></a>04单色：将相片转为黑色</h5><h4 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h4><h5 id="01-锐度：可以理解为相片的清晰度，锐度高则清晰锐利，反之柔和"><a href="#01-锐度：可以理解为相片的清晰度，锐度高则清晰锐利，反之柔和" class="headerlink" title="01 锐度：可以理解为相片的清晰度，锐度高则清晰锐利，反之柔和"></a>01 锐度：可以理解为相片的清晰度，锐度高则清晰锐利，反之柔和</h5><h5 id="02-反差：相片的明暗对比，反差大则对比度高，色彩鲜艳，反之灰蒙暗淡"><a href="#02-反差：相片的明暗对比，反差大则对比度高，色彩鲜艳，反之灰蒙暗淡" class="headerlink" title="02 反差：相片的明暗对比，反差大则对比度高，色彩鲜艳，反之灰蒙暗淡"></a>02 反差：相片的明暗对比，反差大则对比度高，色彩鲜艳，反之灰蒙暗淡</h5><h5 id="03-饱和度：相片中的色彩的鲜艳程度，饱和度高则色彩鲜艳，反之暗淡"><a href="#03-饱和度：相片中的色彩的鲜艳程度，饱和度高则色彩鲜艳，反之暗淡" class="headerlink" title="03 饱和度：相片中的色彩的鲜艳程度，饱和度高则色彩鲜艳，反之暗淡"></a>03 饱和度：相片中的色彩的鲜艳程度，饱和度高则色彩鲜艳，反之暗淡</h5><h5 id="04-色调：相片中颜色的整体倾向，增加色调则偏黄，反之偏红"><a href="#04-色调：相片中颜色的整体倾向，增加色调则偏黄，反之偏红" class="headerlink" title="04 色调：相片中颜色的整体倾向，增加色调则偏黄，反之偏红"></a>04 色调：相片中颜色的整体倾向，增加色调则偏黄，反之偏红</h5>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·相片格式 ·饱和度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中的业务处理--软删除和硬删除</title>
      <link href="/hexoblog.github.io/2022/07/09/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86-%E8%BD%AF%E5%88%A0%E9%99%A4%E5%92%8C%E7%A1%AC%E5%88%A0%E9%99%A4/"/>
      <url>/hexoblog.github.io/2022/07/09/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86-%E8%BD%AF%E5%88%A0%E9%99%A4%E5%92%8C%E7%A1%AC%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="硬删除"><a href="#硬删除" class="headerlink" title="#硬删除"></a>#硬删除</h1><h3 id="定义：硬删除就是传统的物理删除，直接将记录从数据库中删除"><a href="#定义：硬删除就是传统的物理删除，直接将记录从数据库中删除" class="headerlink" title="定义：硬删除就是传统的物理删除，直接将记录从数据库中删除"></a>定义：硬删除就是传统的物理删除，直接将记录从数据库中删除</h3><h5 id="例如：在我们之前写程序的时候-经常需要删除一条记录-删除语句则是-delete-from-table-where-condition-x3D-conditionValue"><a href="#例如：在我们之前写程序的时候-经常需要删除一条记录-删除语句则是-delete-from-table-where-condition-x3D-conditionValue" class="headerlink" title="例如：在我们之前写程序的时候,经常需要删除一条记录,删除语句则是:delete from table where condition&#x3D;conditionValue"></a>例如：在我们之前写程序的时候,经常需要删除一条记录,删除语句则是:delete from table where condition&#x3D;conditionValue</h5><span id="more"></span><h5 id="这个时候-在数据库中是真正意义上的删除-你没法再通过select语句查出来-而这个做法-就叫硬删除"><a href="#这个时候-在数据库中是真正意义上的删除-你没法再通过select语句查出来-而这个做法-就叫硬删除" class="headerlink" title="这个时候,在数据库中是真正意义上的删除,你没法再通过select语句查出来,而这个做法,就叫硬删除"></a>这个时候,在数据库中是真正意义上的删除,你没法再通过select语句查出来,而这个做法,就叫硬删除</h5><h3 id="缺点：容易误操作从而删除重要的数据，如果想要恢复该数据，需要锁表再去访问日志文件，但是这样可能会造成大量的人力资源浪费（不言多喻，没有后悔药）"><a href="#缺点：容易误操作从而删除重要的数据，如果想要恢复该数据，需要锁表再去访问日志文件，但是这样可能会造成大量的人力资源浪费（不言多喻，没有后悔药）" class="headerlink" title="缺点：容易误操作从而删除重要的数据，如果想要恢复该数据，需要锁表再去访问日志文件，但是这样可能会造成大量的人力资源浪费（不言多喻，没有后悔药）"></a>缺点：容易误操作从而删除重要的数据，如果想要恢复该数据，需要锁表再去访问日志文件，但是这样可能会造成大量的人力资源浪费（不言多喻，没有后悔药）</h3><h3 id="优点：去除部分冗杂数据，节省空间"><a href="#优点：去除部分冗杂数据，节省空间" class="headerlink" title="优点：去除部分冗杂数据，节省空间"></a>优点：去除部分冗杂数据，节省空间</h3><h5 id="例如：这里有一个商品表，和一些相关的订单信息表，然后订单表是关联到商品id的，这个时候如果直接将这个商品删除，就会导致订单查不出这个商品信息。"><a href="#例如：这里有一个商品表，和一些相关的订单信息表，然后订单表是关联到商品id的，这个时候如果直接将这个商品删除，就会导致订单查不出这个商品信息。" class="headerlink" title="例如：这里有一个商品表，和一些相关的订单信息表，然后订单表是关联到商品id的，这个时候如果直接将这个商品删除，就会导致订单查不出这个商品信息。"></a>例如：这里有一个商品表，和一些相关的订单信息表，然后订单表是关联到商品id的，这个时候如果直接将这个商品删除，就会导致订单查不出这个商品信息。</h5><h1 id="软删除"><a href="#软删除" class="headerlink" title="#软删除"></a>#软删除</h1><h3 id="定义：可以叫做逻辑删除、标记删除我们常说的删除不同，并不是真的从数据库中将这条记录去除，而是会设置一个字段，isDelete或者status字段，标识该条记录是否被删除"><a href="#定义：可以叫做逻辑删除、标记删除我们常说的删除不同，并不是真的从数据库中将这条记录去除，而是会设置一个字段，isDelete或者status字段，标识该条记录是否被删除" class="headerlink" title="定义：可以叫做逻辑删除、标记删除我们常说的删除不同，并不是真的从数据库中将这条记录去除，而是会设置一个字段，isDelete或者status字段，标识该条记录是否被删除"></a>定义：可以叫做逻辑删除、标记删除我们常说的删除不同，并不是真的从数据库中将这条记录去除，而是会设置一个字段，isDelete或者status字段，标识该条记录是否被删除</h3><h5 id="例如目前软删除的做法：-https-www-jianshu-com-p-889365078e24"><a href="#例如目前软删除的做法：-https-www-jianshu-com-p-889365078e24" class="headerlink" title="例如目前软删除的做法：(https://www.jianshu.com/p/889365078e24)"></a>例如目前软删除的做法：(<a href="https://www.jianshu.com/p/889365078e24">https://www.jianshu.com/p/889365078e24</a>)</h5><p>1.在表内加 isDeleted bool<br>2.在表内添加 deleted_at timestamp (可以为null) (gem gorm这类orm框架支持)<br>3.删除数据 存储到 因为一个表内 </p><p>第二种方式最差 因为字段可以为null 会导致查询效率大打折扣。更重要的情况 会导致 全表扫描 如果数据量偏大会遇到性能瓶颈</p><h3 id="缺点：会导致查数据慢（https-ruby-china-org-topics-34540）"><a href="#缺点：会导致查数据慢（https-ruby-china-org-topics-34540）" class="headerlink" title="缺点：会导致查数据慢（https://ruby-china.org/topics/34540）"></a>缺点：会导致查数据慢（<a href="https://ruby-china.org/topics/34540%EF%BC%89">https://ruby-china.org/topics/34540）</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IsDelete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git篇--上传以及更新</title>
      <link href="/hexoblog.github.io/2022/07/07/git%E7%AF%87-%E4%B8%8A%E4%BC%A0%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0/"/>
      <url>/hexoblog.github.io/2022/07/07/git%E7%AF%87-%E4%B8%8A%E4%BC%A0%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="git上传步骤：-仅第一次上传可参考"><a href="#git上传步骤：-仅第一次上传可参考" class="headerlink" title="#git上传步骤：(仅第一次上传可参考)"></a>#git上传步骤：(仅第一次上传可参考)</h1><h4 id="01-登录github账号，新建仓库-gt"><a href="#01-登录github账号，新建仓库-gt" class="headerlink" title="01 登录github账号，新建仓库&gt;"></a>01 登录github账号，新建仓库&gt;</h4><span id="more"></span><h4 id="02-无错误然后-使用git-bash打开本地项目的文件夹，然后执行："><a href="#02-无错误然后-使用git-bash打开本地项目的文件夹，然后执行：" class="headerlink" title="02 无错误然后 使用git bash打开本地项目的文件夹，然后执行："></a>02 无错误然后 使用git bash打开本地项目的文件夹，然后执行：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>(初始化git)</p><h4 id="03-无错误然后-复制新建仓库的SSH地址，继续执行"><a href="#03-无错误然后-复制新建仓库的SSH地址，继续执行" class="headerlink" title="03 无错误然后 复制新建仓库的SSH地址，继续执行:"></a>03 无错误然后 复制新建仓库的SSH地址，继续执行:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin SSH地址(粘贴)</span><br></pre></td></tr></table></figure><p>(SSH地址为所提交的仓库地址)</p><h4 id="04-无错误然后-继续执行"><a href="#04-无错误然后-继续执行" class="headerlink" title="04 无错误然后 继续执行:"></a>04 无错误然后 继续执行:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>(“.”代表所有 可用文件名代替”.” 来上传某个文件)<br>(这是添加要提交的本地项目)</p><h4 id="05-无错误然后-继续执行"><a href="#05-无错误然后-继续执行" class="headerlink" title="05 无错误然后 继续执行:"></a>05 无错误然后 继续执行:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;上传描述&quot;</span><br></pre></td></tr></table></figure><p>(提交到本地库)</p><h4 id="06-无错误然后-继续执行"><a href="#06-无错误然后-继续执行" class="headerlink" title="06 无错误然后 继续执行:"></a>06 无错误然后 继续执行:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>(将该项目推送到gitlab端)</p><hr><h3 id="注-推送命令发出后，若出现：-failed-to-push-some-refs-to-git-错误，主要原因是github中的README-md文件不在本地代码目录中，因此，可通过如下命令进行代码合并（pull-x3D-fetch-merge）"><a href="#注-推送命令发出后，若出现：-failed-to-push-some-refs-to-git-错误，主要原因是github中的README-md文件不在本地代码目录中，因此，可通过如下命令进行代码合并（pull-x3D-fetch-merge）" class="headerlink" title="#注:推送命令发出后，若出现：  failed to push some refs to git 错误，主要原因是github中的README.md文件不在本地代码目录中，因此，可通过如下命令进行代码合并（pull&#x3D;fetch+merge）:"></a>#注:推送命令发出后，若出现：  failed to push some refs to git 错误，主要原因是github中的README.md文件不在本地代码目录中，因此，可通过如下命令进行代码合并（pull&#x3D;fetch+merge）:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it pull --rebase origin master</span><br></pre></td></tr></table></figure><h3 id="执行完此代码后可以看到本地代码库多了README-MD文件，此时，再执行语句："><a href="#执行完此代码后可以看到本地代码库多了README-MD文件，此时，再执行语句：" class="headerlink" title="#执行完此代码后可以看到本地代码库多了README.MD文件，此时，再执行语句："></a>#执行完此代码后可以看到本地代码库多了README.MD文件，此时，再执行语句：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure><hr><h1 id="git更新或者在同一个仓库上传新内容–-gt-步骤："><a href="#git更新或者在同一个仓库上传新内容–-gt-步骤：" class="headerlink" title="#git更新或者在同一个仓库上传新内容–&gt;步骤："></a>#git更新或者在同一个仓库上传新内容–&gt;步骤：</h1><h4 id="01-git-bash-已经初始化的仓库，执行："><a href="#01-git-bash-已经初始化的仓库，执行：" class="headerlink" title="01 git bash 已经初始化的仓库，执行："></a>01 git bash 已经初始化的仓库，执行：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>或者只是添加某个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure><h4 id="02-无错误，继续执行："><a href="#02-无错误，继续执行：" class="headerlink" title="02 无错误，继续执行："></a>02 无错误，继续执行：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;更新描述&quot;</span><br></pre></td></tr></table></figure><h4 id="03-无错误，然后再push上传："><a href="#03-无错误，然后再push上传：" class="headerlink" title="03 无错误，然后再push上传："></a>03 无错误，然后再push上传：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><img src="/hexoblog.github.io/2022/07/07/git%E7%AF%87-%E4%B8%8A%E4%BC%A0%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0/%E6%9B%B4%E6%96%B0.png" class title="This is an update image"><h1 id="如果出现端口拒绝，类似：”ssh-connect-to-host-github-com-port-22-Connection-refused”-可以尝试关闭加速器-vpn-然后再试试"><a href="#如果出现端口拒绝，类似：”ssh-connect-to-host-github-com-port-22-Connection-refused”-可以尝试关闭加速器-vpn-然后再试试" class="headerlink" title="#如果出现端口拒绝，类似：”ssh: connect to host github.com port 22: Connection refused”,可以尝试关闭加速器(vpn),然后再试试"></a>#如果出现端口拒绝，类似：”ssh: connect to host github.com port 22: Connection refused”,可以尝试关闭加速器(vpn),然后再试试</h1>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言基础--查漏补缺</title>
      <link href="/hexoblog.github.io/2022/07/05/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/hexoblog.github.io/2022/07/05/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="25个关键词"><a href="#25个关键词" class="headerlink" title="#25个关键词"></a>#25个关键词</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">break    default      func    interface    select</span><br><span class="line">case     defer        go      map          struct</span><br><span class="line">chan     else         goto    package      switch</span><br><span class="line">const    fallthrough  if      range        type</span><br><span class="line">continue for          import  return       var</span><br></pre></td></tr></table></figure><h6 id="–来源于W3Cschool–Go-web编程"><a href="#–来源于W3Cschool–Go-web编程" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><span id="more"></span><h1 id="Go程序是通过package来组织的"><a href="#Go程序是通过package来组织的" class="headerlink" title="#Go程序是通过package来组织的"></a>#Go程序是通过package来组织的</h1><h4 id="每一个可独立运行的Go程序，必定包含一个package-main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。"><a href="#每一个可独立运行的Go程序，必定包含一个package-main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。" class="headerlink" title="每一个可独立运行的Go程序，必定包含一个package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。"></a>每一个可独立运行的Go程序，必定包含一个package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。</h4><h4 id="Go是天生支持UTF-8的-字符串都是采用UTF-8字符集编码-，任何字符都可以直接输出，你甚至可以用UTF-8中的任何字符作为标识符"><a href="#Go是天生支持UTF-8的-字符串都是采用UTF-8字符集编码-，任何字符都可以直接输出，你甚至可以用UTF-8中的任何字符作为标识符" class="headerlink" title="Go是天生支持UTF-8的(字符串都是采用UTF-8字符集编码 )，任何字符都可以直接输出，你甚至可以用UTF-8中的任何字符作为标识符"></a>Go是天生支持UTF-8的(字符串都是采用UTF-8字符集编码 )，<strong>任何字符都可以直接输出</strong>，你甚至可以用UTF-8中的任何字符作为标识符</h4><h6 id="–来源于W3Cschool–Go-web编程-1"><a href="#–来源于W3Cschool–Go-web编程-1" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="x3D-符号只能在函数内部使用，在函数外部使用则无法编译通过"><a href="#x3D-符号只能在函数内部使用，在函数外部使用则无法编译通过" class="headerlink" title="# :&#x3D;符号只能在函数内部使用，在函数外部使用则无法编译通过"></a># :&#x3D;符号只能在函数内部使用，在函数外部使用则无法编译通过</h1><h6 id="–来源于W3Cschool–Go-web编程-2"><a href="#–来源于W3Cschool–Go-web编程-2" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="已声明但未使用的变量会在编译阶段报错"><a href="#已声明但未使用的变量会在编译阶段报错" class="headerlink" title="#已声明但未使用的变量会在编译阶段报错"></a>#已声明但未使用的变量会在编译阶段报错</h1><h6 id="–来源于W3Cschool–Go-web编程-3"><a href="#–来源于W3Cschool–Go-web编程-3" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="Go-常量和一般程序语言不同的是，可以指定相当多的小数位数-例如200位-，-若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit"><a href="#Go-常量和一般程序语言不同的是，可以指定相当多的小数位数-例如200位-，-若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit" class="headerlink" title="#Go 常量和一般程序语言不同的是，可以指定相当多的小数位数(例如200位)， 若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit"></a>#Go 常量和一般程序语言不同的是，可以指定相当多的小数位数(例如200位)， 若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit</h1><h6 id="–来源于W3Cschool–Go-web编程-4"><a href="#–来源于W3Cschool–Go-web编程-4" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="make用于内建类型（map、slice-和channel）的内存分配。new用于各种类型的内存分配："><a href="#make用于内建类型（map、slice-和channel）的内存分配。new用于各种类型的内存分配：" class="headerlink" title="#make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配："></a>#make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配：</h1><img src="/hexoblog.github.io/2022/07/05/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98.png" class title="分配内存"><h6 id="–来源于W3Cschool–Go-web编程-5"><a href="#–来源于W3Cschool–Go-web编程-5" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="new-T-分配了零值填充的T类型的内存空间，它返回了一个指针，指向新分配的类型T的零值"><a href="#new-T-分配了零值填充的T类型的内存空间，它返回了一个指针，指向新分配的类型T的零值" class="headerlink" title="#new(T)分配了零值填充的T类型的内存空间，它返回了一个指针，指向新分配的类型T的零值"></a>#new(T)分配了零值填充的T类型的内存空间，它返回了一个指针，指向新分配的类型T的零值</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new 返回指针</span><br></pre></td></tr></table></figure><p>make和new的区别：</p><img src="/hexoblog.github.io/2022/07/05/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/new%E5%92%8Cmake.png" class title="new和make"><h6 id="–来源于W3Cschool–Go-web编程-6"><a href="#–来源于W3Cschool–Go-web编程-6" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="goto语句的标签名大小写是敏感的"><a href="#goto语句的标签名大小写是敏感的" class="headerlink" title="#goto语句的标签名大小写是敏感的"></a>#goto语句的标签名大小写是敏感的</h1><h6 id="–来源于W3Cschool–Go-web编程-7"><a href="#–来源于W3Cschool–Go-web编程-7" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="go语言没有while关键词，但是"><a href="#go语言没有while关键词，但是" class="headerlink" title="#go语言没有while关键词，但是:"></a>#go语言没有while关键词，但是:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := 1</span><br><span class="line">for ; sum &lt; 1000;  &#123;</span><br><span class="line">    sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如上，可以像这样构建一个while循环功能"><a href="#如上，可以像这样构建一个while循环功能" class="headerlink" title="如上，可以像这样构建一个while循环功能"></a>如上，可以像这样构建一个while循环功能</h3><h6 id="–来源于W3Cschool–Go-web编程-8"><a href="#–来源于W3Cschool–Go-web编程-8" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="swith-case-我们把很多值聚合在了一个case里面，同时，Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch-但是可以使用fallthrough强制执行后面的case代码。"><a href="#swith-case-我们把很多值聚合在了一个case里面，同时，Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch-但是可以使用fallthrough强制执行后面的case代码。" class="headerlink" title="#(swith case):我们把很多值聚合在了一个case里面，同时，Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。:"></a>#(swith case):我们把很多值聚合在了一个case里面，同时，Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">integer := 6</span><br><span class="line">switch integer &#123;</span><br><span class="line">    case 4:</span><br><span class="line">    fmt.Println(&quot;The integer was &lt;= 4&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">    case 5:</span><br><span class="line">    fmt.Println(&quot;The integer was &lt;= 5&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">    case 6:</span><br><span class="line">    fmt.Println(&quot;The integer was &lt;= 6&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">    case 7:</span><br><span class="line">    fmt.Println(&quot;The integer was &lt;= 7&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">    case 8:</span><br><span class="line">    fmt.Println(&quot;The integer was &lt;= 8&quot;)</span><br><span class="line">    fallthrough</span><br><span class="line">    default:</span><br><span class="line">    fmt.Println(&quot;default case&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上面程序的结果"><a href="#上面程序的结果" class="headerlink" title="上面程序的结果"></a>上面程序的结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The integer was &lt;= 6</span><br><span class="line">The integer was &lt;= 7</span><br><span class="line">The integer was &lt;= 8</span><br><span class="line">default case</span><br></pre></td></tr></table></figure><h6 id="–来源于W3Cschool–Go-web编程-9"><a href="#–来源于W3Cschool–Go-web编程-9" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id="程序执行过程：main包中的其他被导入的包–-gt-包中的包级常量和变量初始化–-gt-init函数-如果有的话-–-gt-包加载完后就对main中的包级常量和变量进行初始化，然后执行main包中的init函数–-gt-最后执行main中的函数："><a href="#程序执行过程：main包中的其他被导入的包–-gt-包中的包级常量和变量初始化–-gt-init函数-如果有的话-–-gt-包加载完后就对main中的包级常量和变量进行初始化，然后执行main包中的init函数–-gt-最后执行main中的函数：" class="headerlink" title="#程序执行过程：main包中的其他被导入的包–&gt;包中的包级常量和变量初始化–&gt;init函数(如果有的话)–&gt;包加载完后就对main中的包级常量和变量进行初始化，然后执行main包中的init函数–&gt;最后执行main中的函数："></a>#程序执行过程：main包中的其他被导入的包–&gt;包中的包级常量和变量初始化–&gt;init函数(如果有的话)–&gt;包加载完后就对main中的包级常量和变量进行初始化，然后执行main包中的init函数–&gt;最后执行main中的函数：</h1><p>{ % asset_img 程序执行过程.png 程序执行过程 % }</p><h6 id="–来源于W3Cschool–Go-web编程-10"><a href="#–来源于W3Cschool–Go-web编程-10" class="headerlink" title="–来源于W3Cschool–Go web编程"></a>–来源于W3Cschool–Go web编程</h6><hr><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言参数校验</title>
      <link href="/hexoblog.github.io/2022/07/04/GO%E8%AF%AD%E8%A8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>/hexoblog.github.io/2022/07/04/GO%E8%AF%AD%E8%A8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="#前言"></a>#前言</h1><h5 id="在服务器中需要接收前端发送过来的请求并且进行处理，而这些请求往往是附带参数的，所以对参数的处理是非常重要的一环"><a href="#在服务器中需要接收前端发送过来的请求并且进行处理，而这些请求往往是附带参数的，所以对参数的处理是非常重要的一环" class="headerlink" title="在服务器中需要接收前端发送过来的请求并且进行处理，而这些请求往往是附带参数的，所以对参数的处理是非常重要的一环"></a>在服务器中需要接收前端发送过来的请求并且进行处理，而这些请求往往是附带参数的，所以对参数的处理是非常重要的一环</h5><hr><span id="more"></span><h1 id="何为参数校验？"><a href="#何为参数校验？" class="headerlink" title="#何为参数校验？"></a>#何为参数校验？</h1><h5 id="顾名思义就是对请求所附带的参数进行验证（可以理解为后端对前端所发送的数据的进一步筛选处理，然后返回对应的逻辑）"><a href="#顾名思义就是对请求所附带的参数进行验证（可以理解为后端对前端所发送的数据的进一步筛选处理，然后返回对应的逻辑）" class="headerlink" title="顾名思义就是对请求所附带的参数进行验证（可以理解为后端对前端所发送的数据的进一步筛选处理，然后返回对应的逻辑）"></a>顾名思义就是对请求所附带的参数进行验证（可以理解为后端对前端所发送的数据的进一步筛选处理，然后返回对应的逻辑）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?ie=UTF-8&amp;wd=JSR303</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="上面这段请求中，”-”后面的内容就是参数-参数是以键值对的形式出现-，还有的参数并不会出现在url当中，他们会包含在请求体当中，通过url是看不到的。"><a href="#上面这段请求中，”-”后面的内容就是参数-参数是以键值对的形式出现-，还有的参数并不会出现在url当中，他们会包含在请求体当中，通过url是看不到的。" class="headerlink" title="上面这段请求中，”?”后面的内容就是参数(参数是以键值对的形式出现)，还有的参数并不会出现在url当中，他们会包含在请求体当中，通过url是看不到的。"></a>上面这段请求中，”?”后面的内容就是参数(参数是以键值对的形式出现)，还有的参数并不会出现在url当中，他们会包含在请求体当中，通过url是看不到的。</h5><hr><h1 id="goland参数校验"><a href="#goland参数校验" class="headerlink" title="#goland参数校验"></a>#goland参数校验</h1><h3 id="常见的参数校验可以分为以下两种："><a href="#常见的参数校验可以分为以下两种：" class="headerlink" title="常见的参数校验可以分为以下两种："></a>常见的参数校验可以分为以下两种：</h3><p> -客户端参数校验：在数据提交到服务器之前，发生在浏览器端或者app应用端，相比服务器端校验，用户体验更好，能实时反馈用户的输入校验结果。</p><p> -服务器端参数校验：发生在客户端提交数据并被服务器端程序接收之后，通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息，并且告诉客户端发生错误的具体位置和原因，服务器端校验不像客户端校验那样有好的用户体验，因为它直到整个表单都提交后才能返回错误信息。但是服务器端校验是应用对抗错误，恶意数据的最后防线，在这之后，数据将被持久化至数据库。当今所有的服务端框架都提供了数据校验与过滤功能（让数据更安全）。</p><h3 id="针对服务器-go语言参数校验的三种方式-相关文档地址-https-juejin-cn-post-7041508590913323039-作者：巫师韩-："><a href="#针对服务器-go语言参数校验的三种方式-相关文档地址-https-juejin-cn-post-7041508590913323039-作者：巫师韩-：" class="headerlink" title="针对服务器-go语言参数校验的三种方式(相关文档地址:https://juejin.cn/post/7041508590913323039;作者：巫师韩)："></a>针对服务器-go语言参数校验的三种方式(相关文档地址:<a href="https://juejin.cn/post/7041508590913323039;%E4%BD%9C%E8%80%85%EF%BC%9A%E5%B7%AB%E5%B8%88%E9%9F%A9)%EF%BC%9A">https://juejin.cn/post/7041508590913323039;作者：巫师韩)：</a></h3><h3 id="01-第一种实现方式：自定义实现参数校验逻辑"><a href="#01-第一种实现方式：自定义实现参数校验逻辑" class="headerlink" title="01 第一种实现方式：自定义实现参数校验逻辑"></a>01 第一种实现方式：自定义实现参数校验逻辑</h3><h6 id="Controller层职责：从HTTP请求中获得信息，提取参数，并分发给不同的处理服务。"><a href="#Controller层职责：从HTTP请求中获得信息，提取参数，并分发给不同的处理服务。" class="headerlink" title="Controller层职责：从HTTP请求中获得信息，提取参数，并分发给不同的处理服务。"></a><strong>Controller层职责：从HTTP请求中获得信息，提取参数，并分发给不同的处理服务。</strong></h6><h6 id="重复代码是软件质量下降的重大来源"><a href="#重复代码是软件质量下降的重大来源" class="headerlink" title="重复代码是软件质量下降的重大来源"></a><strong>重复代码是软件质量下降的重大来源</strong></h6><h3 id="02-第二种实现方式：模型绑定校验–go-playground-x2F-validator–一款优秀的Go语言校验库，基于标记为结构体和单个字段实现值验证。使用简单、快捷-代码来源：https-blog-csdn-net-weixin-42117918-article-details-107407053-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165692403116780357281208-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165692403116780357281208-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-sobaiduend-default-1-107407053-null-null-142-v30-pc-rank-34-185-v2-control-amp-utm-term-go-E8-AF-AD-E8-A8-80-E5-8F-82-E6-95-B0-E6-A0-A1-E9-AA-8C-amp-spm-1018-2226-3001-4187-gt-结构体验证示例"><a href="#02-第二种实现方式：模型绑定校验–go-playground-x2F-validator–一款优秀的Go语言校验库，基于标记为结构体和单个字段实现值验证。使用简单、快捷-代码来源：https-blog-csdn-net-weixin-42117918-article-details-107407053-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165692403116780357281208-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165692403116780357281208-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-sobaiduend-default-1-107407053-null-null-142-v30-pc-rank-34-185-v2-control-amp-utm-term-go-E8-AF-AD-E8-A8-80-E5-8F-82-E6-95-B0-E6-A0-A1-E9-AA-8C-amp-spm-1018-2226-3001-4187-gt-结构体验证示例" class="headerlink" title="02 第二种实现方式：模型绑定校验–go-playground &#x2F; validator–一款优秀的Go语言校验库，基于标记为结构体和单个字段实现值验证。使用简单、快捷(代码来源：https://blog.csdn.net/weixin_42117918/article/details/107407053?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165692403116780357281208%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165692403116780357281208&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107407053-null-null.142^v30^pc_rank_34,185^v2^control&amp;utm_term=go%E8%AF%AD%E8%A8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C&amp;spm=1018.2226.3001.4187)--&gt;结构体验证示例"></a>02 第二种实现方式：模型绑定校验–go-playground &#x2F; validator–一款优秀的Go语言校验库，基于标记为结构体和单个字段实现值验证。使用简单、快捷(代码来源：<a href="https://blog.csdn.net/weixin_42117918/article/details/107407053?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165692403116780357281208%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165692403116780357281208&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107407053-null-null.142%5Ev30%5Epc_rank_34,185%5Ev2%5Econtrol&amp;utm_term=go%E8%AF%AD%E8%A8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C&amp;spm=1018.2226.3001.4187)--&gt;%E7%BB%93%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81%E7%A4%BA%E4%BE%8B">https://blog.csdn.net/weixin_42117918/article/details/107407053?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165692403116780357281208%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165692403116780357281208&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107407053-null-null.142^v30^pc_rank_34,185^v2^control&amp;utm_term=go%E8%AF%AD%E8%A8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C&amp;spm=1018.2226.3001.4187)--&gt;结构体验证示例</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/go-playground/validator</span><br></pre></td></tr></table></figure><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"> </span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/go-playground/validator&quot;</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">var validate *validator.Validate //定义</span><br><span class="line"> </span><br><span class="line">type User struct &#123;</span><br><span class="line">Name  string `validate:&quot;required&quot;` //非空</span><br><span class="line">Age   uint8  `validate:&quot;gte=0,lte=130&quot;` //  0&lt;=Age&lt;=130</span><br><span class="line">Email string `validate:&quot;required,email&quot;` //非空，email格式</span><br><span class="line">//dive关键字代表 进入到嵌套结构体进行判断</span><br><span class="line">Address []*Address `validate:&quot;dive&quot;` //  可以拥有多个地址</span><br><span class="line">&#125;</span><br><span class="line">type Address struct &#123;</span><br><span class="line">Province string `validate:&quot;required&quot;` //非空</span><br><span class="line">City     string `validate:&quot;required&quot;` //非空</span><br><span class="line">Phone    string `validate:&quot;numeric,len=11&quot;` //数字类型，长度为11</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">func main() &#123;</span><br><span class="line">validate = validator.New() //初始化（赋值）</span><br><span class="line">validateStruct()           //结构体校验</span><br><span class="line">validateVariable()         //变量校验</span><br><span class="line">&#125;</span><br><span class="line">func validateStruct() &#123;</span><br><span class="line">address := Address&#123;</span><br><span class="line">Province: &quot;重庆&quot;,</span><br><span class="line">City:     &quot;重庆&quot;,</span><br><span class="line">Phone:    &quot;13366663333x&quot;,</span><br><span class="line">&#125;</span><br><span class="line">user := User&#123;</span><br><span class="line">Name:  &quot;江洲&quot;,</span><br><span class="line">Age:   23,</span><br><span class="line">Email: &quot;jz@163.com&quot;,</span><br><span class="line">Address: []*Address&#123;&amp;address&#125;,</span><br><span class="line">&#125;</span><br><span class="line">err := validate.Struct(user)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">//断言为：validator.ValidationErrors，类型为：[]FieldError</span><br><span class="line">for _, e := range err.(validator.ValidationErrors) &#123;</span><br><span class="line">fmt.Println(&quot;Namespace:&quot;, e.Namespace())</span><br><span class="line">fmt.Println(&quot;Field:&quot;, e.Field())</span><br><span class="line">fmt.Println(&quot;StructNamespace:&quot;, e.StructNamespace())</span><br><span class="line">fmt.Println(&quot;StructField:&quot;, e.StructField())</span><br><span class="line">fmt.Println(&quot;Tag:&quot;, e.Tag())</span><br><span class="line">fmt.Println(&quot;ActualTag:&quot;, e.ActualTag())</span><br><span class="line">fmt.Println(&quot;Kind:&quot;, e.Kind())</span><br><span class="line">fmt.Println(&quot;Type:&quot;, e.Type())</span><br><span class="line">fmt.Println(&quot;Value:&quot;, e.Value())</span><br><span class="line">fmt.Println(&quot;Param:&quot;, e.Param())</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fmt.Println(&quot;结构体输入数据类型错误！&quot;)</span><br><span class="line">return</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;结构体校验通过&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//变量校验</span><br><span class="line">func validateVariable() &#123;</span><br><span class="line">myEmail := &quot;123@qq.com&quot; //邮箱地址：xx@xx.com</span><br><span class="line">err := validate.Var(myEmail, &quot;required,email&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;变量校验通过！&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Namespace: User.Address[0].Phone</span><br><span class="line">Field: phone</span><br><span class="line">StructNamespace: User.Address[0].Phone</span><br><span class="line">StructFiled: Phone</span><br><span class="line">Tag: numeric</span><br><span class="line">ActualTag: numeric</span><br><span class="line">Kind: string</span><br><span class="line">Type: string</span><br><span class="line">Value: 13366663333x</span><br><span class="line">Param:</span><br><span class="line"></span><br><span class="line">结构体输入数据类型错误！</span><br><span class="line">变量校验通过！</span><br></pre></td></tr></table></figure><h3 id="模型校验是通过反射机制来实现的，而反射效率相对来说效率不高-可以从ShouldBind函数从下追，把自带的校验功能屏蔽，提高框架效率"><a href="#模型校验是通过反射机制来实现的，而反射效率相对来说效率不高-可以从ShouldBind函数从下追，把自带的校验功能屏蔽，提高框架效率" class="headerlink" title="模型校验是通过反射机制来实现的，而反射效率相对来说效率不高(可以从ShouldBind函数从下追，把自带的校验功能屏蔽，提高框架效率???!!!)"></a><strong>模型校验是通过反射机制来实现的，而反射效率相对来说效率不高(可以从ShouldBind函数从下追，把自带的校验功能屏蔽，提高框架效率???!!!)</strong></h3><h3 id="03-第三种实现方式：拆解模型字段，组合结构体"><a href="#03-第三种实现方式：拆解模型字段，组合结构体" class="headerlink" title="#03 第三种实现方式：拆解模型字段，组合结构体"></a>#03 第三种实现方式：拆解模型字段，组合结构体</h3>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust踩坑日记01</title>
      <link href="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/"/>
      <url>/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h1 id="入坑Rust第一天"><a href="#入坑Rust第一天" class="headerlink" title="入坑Rust第一天"></a>入坑Rust第一天</h1><h4 id="先把Rustc工具下载好之后，然后执行rustinit-exe程序安装rust-安装过程中，系统提示需要c-x2F-c-build-tools，于是在微软商店下载Visual-Studio，安装下载c-x2F-c-桌面配置程序，大概4g左右，-因为MinGW之前配置Goland已经下载好了"><a href="#先把Rustc工具下载好之后，然后执行rustinit-exe程序安装rust-安装过程中，系统提示需要c-x2F-c-build-tools，于是在微软商店下载Visual-Studio，安装下载c-x2F-c-桌面配置程序，大概4g左右，-因为MinGW之前配置Goland已经下载好了" class="headerlink" title="先把Rustc工具下载好之后，然后执行rustinit.exe程序安装rust,安装过程中，系统提示需要c&#x2F;c++ build tools，于是在微软商店下载Visual Studio，安装下载c&#x2F;c++桌面配置程序，大概4g左右，(因为MinGW之前配置Goland已经下载好了)"></a>先把Rustc工具下载好之后，然后执行rustinit.exe程序安装rust,安装过程中，系统提示需要c&#x2F;c++ build tools，于是在微软商店下载Visual Studio，安装下载c&#x2F;c++桌面配置程序，大概4g左右，(因为MinGW之前配置Goland已经下载好了)</h4><span id="more"></span><h4 id="然后开始使用vscode搭建rust环境，下载好相关的语言包和调试工具，发现运行时遇到了一个困扰大半天的问题（rustc和cargo编译均有问题）："><a href="#然后开始使用vscode搭建rust环境，下载好相关的语言包和调试工具，发现运行时遇到了一个困扰大半天的问题（rustc和cargo编译均有问题）：" class="headerlink" title="然后开始使用vscode搭建rust环境，下载好相关的语言包和调试工具，发现运行时遇到了一个困扰大半天的问题（rustc和cargo编译均有问题）："></a>然后开始使用vscode搭建rust环境，下载好相关的语言包和调试工具，发现运行时遇到了一个困扰大半天的问题（rustc和cargo编译均有问题）：</h4><img src="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/rustbug01.png" class title="This is an rustBug image"><img src="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/rustbug02.png" class title="This is an rustBug image"><h4 id="后来发现是使用的MinGW不对（发现是包的问题），使用的MinGW需要是seh版本的，而非sjlj版本，如下："><a href="#后来发现是使用的MinGW不对（发现是包的问题），使用的MinGW需要是seh版本的，而非sjlj版本，如下：" class="headerlink" title="后来发现是使用的MinGW不对（发现是包的问题），使用的MinGW需要是seh版本的，而非sjlj版本，如下："></a>后来发现是使用的MinGW不对（发现是包的问题），使用的MinGW需要是seh版本的，而非sjlj版本，如下：</h4><img src="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" class title="This is an solotionTest image"><h4 id="下载后-速度有点慢-，使用rustc和cargo进行编译–-gt-问题得到解决："><a href="#下载后-速度有点慢-，使用rustc和cargo进行编译–-gt-问题得到解决：" class="headerlink" title="下载后(速度有点慢)，使用rustc和cargo进行编译–&gt;问题得到解决："></a>下载后(速度有点慢)，使用rustc和cargo进行编译–&gt;问题得到解决：</h4><img src="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/rust%E8%A7%A3%E5%86%B301.png" class title="This is an solution image"><img src="/hexoblog.github.io/2022/07/04/Rust%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B001/rust%E8%A7%A3%E5%86%B302.png" class title="This is an solution image">]]></content>
      
      
      <categories>
          
          <category> Rust语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习01--环境检查基础篇</title>
      <link href="/hexoblog.github.io/2022/07/02/Rust%E5%AD%A6%E4%B9%A001--%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/hexoblog.github.io/2022/07/02/Rust%E5%AD%A6%E4%B9%A001--%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行环境检查以及简单rustc和cargo命令（配置环境以及安装rust网上超多教程）"><a href="#命令行环境检查以及简单rustc和cargo命令（配置环境以及安装rust网上超多教程）" class="headerlink" title="#命令行环境检查以及简单rustc和cargo命令（配置环境以及安装rust网上超多教程）"></a>#命令行环境检查以及简单rustc和cargo命令（配置环境以及安装rust网上超多教程）</h1><span id="more"></span><h2 id="验证Cargo包管理器安装"><a href="#验证Cargo包管理器安装" class="headerlink" title="验证Cargo包管理器安装"></a>验证Cargo包管理器安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo --version</span><br></pre></td></tr></table></figure><h2 id="验证rustc编译工具安装"><a href="#验证rustc编译工具安装" class="headerlink" title="验证rustc编译工具安装"></a>验证rustc编译工具安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br></pre></td></tr></table></figure><h2 id="查看rustc的版本"><a href="#查看rustc的版本" class="headerlink" title="查看rustc的版本"></a>查看rustc的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc -V</span><br></pre></td></tr></table></figure><h2 id="查看rustc的基本用法"><a href="#查看rustc的基本用法" class="headerlink" title="查看rustc的基本用法"></a>查看rustc的基本用法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc -h</span><br></pre></td></tr></table></figure><h2 id="查看cargo的基本用法"><a href="#查看cargo的基本用法" class="headerlink" title="查看cargo的基本用法"></a>查看cargo的基本用法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo -h</span><br></pre></td></tr></table></figure><h2 id="使用rustc编译rs文件-编译成功后会生成一个二进制的可执行文件，运行这个main可执行文件"><a href="#使用rustc编译rs文件-编译成功后会生成一个二进制的可执行文件，运行这个main可执行文件" class="headerlink" title="使用rustc编译rs文件,编译成功后会生成一个二进制的可执行文件，运行这个main可执行文件"></a>使用rustc编译rs文件,编译成功后会生成一个二进制的可执行文件，运行这个main可执行文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc main.rs //编译</span><br><span class="line">./main.rs //运行</span><br></pre></td></tr></table></figure><h2 id="使用cargo工具，新建一个rustprojects文件夹，命令行打开运行如下代码："><a href="#使用cargo工具，新建一个rustprojects文件夹，命令行打开运行如下代码：" class="headerlink" title="使用cargo工具，新建一个rustprojects文件夹，命令行打开运行如下代码："></a>使用cargo工具，新建一个rustprojects文件夹，命令行打开运行如下代码：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new xxx //xxx为包名</span><br></pre></td></tr></table></figure><h4 id="成功后会有一个项目结构出现："><a href="#成功后会有一个项目结构出现：" class="headerlink" title="成功后会有一个项目结构出现："></a>成功后会有一个项目结构出现：</h4><img src="/hexoblog.github.io/2022/07/02/Rust%E5%AD%A6%E4%B9%A001--%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%9F%BA%E7%A1%80%E7%AF%87/new.png" class title="This is an cargo new image"><h4 id="继续执行："><a href="#继续执行：" class="headerlink" title="继续执行："></a>继续执行：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run main.rs</span><br></pre></td></tr></table></figure><h4 id="成功执行-new一个包的时候系统会自动在main-rs文件内写入一段打印”Hello-world”的程序"><a href="#成功执行-new一个包的时候系统会自动在main-rs文件内写入一段打印”Hello-world”的程序" class="headerlink" title="成功执行(new一个包的时候系统会自动在main.rs文件内写入一段打印”Hello world”的程序)"></a>成功执行(new一个包的时候系统会自动在main.rs文件内写入一段打印”Hello world”的程序)</h4><img src="/hexoblog.github.io/2022/07/02/Rust%E5%AD%A6%E4%B9%A001--%E7%8E%AF%E5%A2%83%E6%A3%80%E6%9F%A5%E5%9F%BA%E7%A1%80%E7%AF%87/run.png" class title="This is an cargo run image">]]></content>
      
      
      <categories>
          
          <category> Rust语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的新词</title>
      <link href="/hexoblog.github.io/2022/07/02/%E6%88%91%E7%9A%84%E6%96%B0%E8%AF%8D/"/>
      <url>/hexoblog.github.io/2022/07/02/%E6%88%91%E7%9A%84%E6%96%B0%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="01-容器技术-doker"><a href="#01-容器技术-doker" class="headerlink" title="01.容器技术(doker)"></a>01.容器技术(doker)</h1><h3 id="Doker是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙河机制，，相互之间不会有任何接口-类似于iphone的app-。几乎没有任何性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统"><a href="#Doker是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙河机制，，相互之间不会有任何接口-类似于iphone的app-。几乎没有任何性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统" class="headerlink" title="Doker是一个开源的应用容器引擎，让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙河机制，，相互之间不会有任何接口(类似于iphone的app)。几乎没有任何性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统"></a><strong>Doker是一个开源的应用容器引擎</strong>，让<strong>开发者打包他们的应用以及依赖包到一个可移植的容器中</strong>，然后发布到<strong>任何流行的Linux机器</strong>上，也可以实现虚拟化。容器是完全使用沙河机制，，相互之间不会有任何接口(类似于iphone的app)。<strong>几乎没有任何性能开销</strong>，可以很容易地在机器和数据中心中运行。最重要的是，他们<strong>不依赖于任何语言、框架或包装系统</strong></h3><h1 id="02-k8s-go"><a href="#02-k8s-go" class="headerlink" title="02.k8s(go)"></a>02.k8s(go)</h1><h3 id="k8s全称kubernetes-谷歌开源，k8s是为容器而生的一个可移植容器的编排管理工具"><a href="#k8s全称kubernetes-谷歌开源，k8s是为容器而生的一个可移植容器的编排管理工具" class="headerlink" title="k8s全称kubernetes 谷歌开源，k8s是为容器而生的一个可移植容器的编排管理工具"></a>k8s全称kubernetes 谷歌开源，k8s是为容器而生的一个可移植容器的编排管理工具</h3><span id="more"></span><h1 id="03-Mozilla开发–rust"><a href="#03-Mozilla开发–rust" class="headerlink" title="03.Mozilla开发–rust"></a>03.Mozilla开发–rust</h1><h1 id="04-MinGW-–rust、go"><a href="#04-MinGW-–rust、go" class="headerlink" title="04.MinGW –rust、go"></a>04.MinGW –rust、go</h1><h1 id="05-WSGI-–goweb"><a href="#05-WSGI-–goweb" class="headerlink" title="05.WSGI –goweb"></a>05.WSGI –goweb</h1><h1 id="06-Erlang"><a href="#06-Erlang" class="headerlink" title="06.Erlang"></a>06.Erlang</h1><h1 id="07-Rails-框架–rust"><a href="#07-Rails-框架–rust" class="headerlink" title="07.Rails 框架–rust"></a>07.Rails 框架–rust</h1><h1 id="08-acwing"><a href="#08-acwing" class="headerlink" title="08.acwing"></a>08.acwing</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言错误处理</title>
      <link href="/hexoblog.github.io/2022/07/01/Go%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/hexoblog.github.io/2022/07/01/Go%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="go语言中错误处理方式为："><a href="#go语言中错误处理方式为：" class="headerlink" title="#go语言中错误处理方式为："></a>#go语言中错误处理方式为：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic()-defer-recover()</span><br></pre></td></tr></table></figure><h4 id="Go语言中可以使用panic-函数抛出一个错误，然后在defer中通过recover-函数捕获异常进程后续处理。"><a href="#Go语言中可以使用panic-函数抛出一个错误，然后在defer中通过recover-函数捕获异常进程后续处理。" class="headerlink" title="Go语言中可以使用panic()函数抛出一个错误，然后在defer中通过recover()函数捕获异常进程后续处理。"></a>Go语言中可以使用panic()函数抛出一个错误，然后在defer中通过recover()函数捕获异常进程后续处理。</h4><span id="more"></span><h2 id="panic"><a href="#panic" class="headerlink" title="#panic()"></a>#panic()</h2><h4 id="go语言的内置函数，用于抛出错误，定义如下："><a href="#go语言的内置函数，用于抛出错误，定义如下：" class="headerlink" title="go语言的内置函数，用于抛出错误，定义如下："></a>go语言的内置函数，用于抛出错误，定义如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func panic(v interface &#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="请注意，如果单独只使用panic-对错误进行抛出，后续程序将终止执行"><a href="#请注意，如果单独只使用panic-对错误进行抛出，后续程序将终止执行" class="headerlink" title="!!!请注意，如果单独只使用panic()对错误进行抛出，后续程序将终止执行"></a>!!!请注意，如果单独只使用panic()对错误进行抛出，后续程序将终止执行</h4><h2 id="defer"><a href="#defer" class="headerlink" title="#defer"></a>#defer</h2><h4 id="defer是go语言的预留关键字，用于延迟执行函数的执行。通常在资源释放、链接关闭、函数结束时调用。多个defer为堆栈结构，后进先出，并且在压栈时不能有未知变量或函数，defer在此可用于异常抛出后的处理。"><a href="#defer是go语言的预留关键字，用于延迟执行函数的执行。通常在资源释放、链接关闭、函数结束时调用。多个defer为堆栈结构，后进先出，并且在压栈时不能有未知变量或函数，defer在此可用于异常抛出后的处理。" class="headerlink" title="defer是go语言的预留关键字，用于延迟执行函数的执行。通常在资源释放、链接关闭、函数结束时调用。多个defer为堆栈结构，后进先出，并且在压栈时不能有未知变量或函数，defer在此可用于异常抛出后的处理。"></a>defer是go语言的预留关键字，用于延迟执行函数的执行。通常在资源释放、链接关闭、函数结束时调用。<strong>多个defer为堆栈结构</strong>，后进先出，<strong>并且在压栈时不能有未知变量或函数</strong>，<code>defer</code>在此可用于异常抛出后的处理。</h4><h2 id="recover"><a href="#recover" class="headerlink" title="#recover()"></a>#recover()</h2><h4 id="go语言的内置函数，用于获取异常，多次调用时只有第一次能获取值，定义："><a href="#go语言的内置函数，用于获取异常，多次调用时只有第一次能获取值，定义：" class="headerlink" title="go语言的内置函数，用于获取异常，多次调用时只有第一次能获取值，定义："></a>go语言的内置函数，用于获取异常，<strong>多次调用时只有第一次能获取值</strong>，定义：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func recover() interface&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="#示例"></a>#示例</h1><h4 id="err1-go代码："><a href="#err1-go代码：" class="headerlink" title="err1.go代码："></a>err1.go代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package errlab</span><br><span class="line"> </span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"> </span><br><span class="line">//defer recover 来处理错误</span><br><span class="line"> </span><br><span class="line">func Testerr()&#123;</span><br><span class="line">//使用defer+recover来捕获和处理异常</span><br><span class="line">//匿名函数</span><br><span class="line">defer func()&#123;</span><br><span class="line">err:=recover()  //recover()是内置函数，可以捕获异常</span><br><span class="line">if err!=nil&#123;   //捕获到错误</span><br><span class="line">fmt.Println(&quot;err=&quot;,err)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;()</span><br><span class="line"> </span><br><span class="line">num1:=10</span><br><span class="line">num2:=0</span><br><span class="line">res:=num1/num2</span><br><span class="line">fmt.Println(&quot;res=&quot;,res)   //err= runtime error: integer divide by zero</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main主函数："><a href="#main主函数：" class="headerlink" title="main主函数："></a>main主函数：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">//错误err的练习</span><br><span class="line">errlab.Testerr()</span><br><span class="line">fmt.Println(&quot;错误后是否会输出@！！&quot;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err= runtime error: integer divide by zero</span><br><span class="line">错误后是否会输出@！！</span><br></pre></td></tr></table></figure><h4 id="从输出结果看出panic-defer-recover-错误处理并没有影响主程序的代码"><a href="#从输出结果看出panic-defer-recover-错误处理并没有影响主程序的代码" class="headerlink" title="从输出结果看出panic()-defer-recover()错误处理并没有影响主程序的代码"></a>从输出结果看出panic()-defer-recover()错误处理并没有影响主程序的代码</h4><h1 id="err-new-–-gt-自定义错误类型"><a href="#err-new-–-gt-自定义错误类型" class="headerlink" title="#err.new()–&gt;自定义错误类型"></a>#err.new()–&gt;自定义错误类型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">func Dingyierr()&#123;</span><br><span class="line">callconfig()</span><br><span class="line">fmt.Println(&quot;callconfig的函数以及下面的代码！&quot;)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//函数去读取配置文件config。int的信息</span><br><span class="line">//如果文件名不正确就是返回错误</span><br><span class="line">func readconfig(name string )(err error)&#123;</span><br><span class="line">if name==&quot;config.ini&quot;&#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return errors.New(&quot;读取文件错误...&quot;)   //自定义错误内容事项</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//调用上面的函数readconfig（）</span><br><span class="line">func callconfig()&#123;</span><br><span class="line">err:=readconfig(&quot;config2.ini&quot;)</span><br><span class="line">if err!=nil&#123;</span><br><span class="line">//如果读取文件发送错误，就是输出这个错误，并终止程序</span><br><span class="line">panic(err)   //panic后，就是终止了程序继续执行了！！！</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;callconfig继续执行。。。。&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词01</title>
      <link href="/hexoblog.github.io/2022/06/30/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D01/"/>
      <url>/hexoblog.github.io/2022/06/30/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D01/</url>
      
        <content type="html"><![CDATA[<h1 id="01-shortcut"><a href="#01-shortcut" class="headerlink" title="01 shortcut"></a>01 shortcut</h1><p>n.近路;捷径;(做某事的)快捷办法，捷径;<br>(显示在计算机桌面上的)快捷方式(图标)</p><p>例:<br>If I take a <strong>shortcut</strong>, I can walk to school for only five minutes.<br>如果抄近路，我只要步行5分钟就能到学校。</p><hr><span id="more"></span><h1 id="02-validator"><a href="#02-validator" class="headerlink" title="02 validator"></a>02 validator</h1><p>n.验证控件;验证器;校验器,验证;验证程序</p><p>例:<br>You must use an appropriate <strong>validator</strong> for the attribute type.<br>您必须为属性类型使用一个适当的确认器。</p><hr><h1 id="03-internationalization"><a href="#03-internationalization" class="headerlink" title="03 internationalization"></a>03 internationalization</h1><p>n.国际共管；国际化</p><p>例：He has welcomed Luxembourg to take an active part in the <strong>internationalization</strong> process of the Chinese currency.<br>他欢迎卢森堡积极参与中国货币国际化进程。</p><hr><h1 id="04-merge"><a href="#04-merge" class="headerlink" title="04 merge"></a>04 merge</h1><p>v.合并;融入;(使)结合;并入;相融;渐渐消失在某物中</p><p>例：<br>The hills <strong>merged</strong> into the dark sky behind them.<br>山峦渐渐隐入背后漆黑的夜空之中</p><hr><h1 id="05-reference-s"><a href="#05-reference-s" class="headerlink" title="05 reference(s)"></a>05 reference(s)</h1><p>n.参考;说到(或写到)的事;提到;谈及;涉及;查询;查阅;(帮助或意见的)征求，征询;标记，标识，编号;推荐信;推荐人;参考书目<br>vt.查阅;参考;给(书等)附参考资料</p><p>例(n)：<br>The book is full of <strong>references</strong> to growing up in India.<br>这本书谈到许多在印度怎样长大成人的事。</p><p>例(vt):<br>Each chapter is <strong>referenced</strong>, citing literature up to 2004.<br>每一章都附有参考书目，引用文献近至2004年</p><hr><h1 id="06-closure"><a href="#06-closure" class="headerlink" title="06 closure"></a>06 closure</h1><p>n.(永久的)停业，关闭;倒闭;(路或桥的)暂时封闭;(因困境结束或事情得到妥善处理等的)宽慰;如释重负</p><p>例：<br>The village school may face eventual <strong>closure</strong>.<br>这所乡村学校可能最终会面临关闭。</p><hr><h1 id="07-blow"><a href="#07-blow" class="headerlink" title="07 blow"></a>07 blow</h1><p>v.吹;刮;;吹奏（哨子、乐器等）;擤（鼻子）;（向某人）送飞吻;吹出（某物）;（使保险丝）熔化，烧断;炸开;泄露;（在某事物上）花大钱，挥霍;浪费（机会）;突然离开（某地）<br>n.(用手、武器等的)猛击;打击;挫折;吹</p><p>例(v)：<br>Fasten the gates securely so that they do not <strong>blow</strong> open.<br>把大门闩好以免被风吹开。</p><p>例(n)：<br>The decision is a hammer <strong>blow</strong> for the steel industry.<br>这一决定对于钢铁业是一个沉重的打击。</p><hr><h1 id="08-spawn"><a href="#08-spawn" class="headerlink" title="08 spawn"></a>08 spawn</h1><p>v.(鱼、蛙等)产卵</p><p>例:<br>These fish will lay <strong>spawn</strong> in about one month from now.<br>这些鱼大约一个月内会产卵。</p><h1 id="09-syntax"><a href="#09-syntax" class="headerlink" title="09 syntax"></a>09 syntax</h1><p>n.句法;句法规则;语构</p><p>例:<br><strong>Syntax</strong> is all the moeny collected at the church from sinners.<br>句法是教会向罪人收取的赎罪金。</p><h1 id="10-sinner-s"><a href="#10-sinner-s" class="headerlink" title="10 sinner(s)"></a>10 sinner(s)</h1><p> n.罪人</p><p>例:<br>God welcomes the <strong>sinner</strong> who repents.<br>上帝欢迎悔过的罪人。</p><h1 id="11-repent"><a href="#11-repent" class="headerlink" title="11 repent"></a>11 repent</h1><p>v.后悔;悔过;忏悔</p><p>例(v):<br>He came to <strong>repent</strong> his hasty decision.<br>他开始后悔自己的草率决定。</p><h1 id="12-hasty"><a href="#12-hasty" class="headerlink" title="12 hasty"></a>12 hasty</h1><p>adj.匆忙的;仓促而就的;草率的;仓促行事;草率作出决定;考虑不周密</p><p>例:<br>Let’s not make any <strong>hasty</strong> decisions.<br>我们不要匆忙作决定</p><h1 id="13-Benchmarks"><a href="#13-Benchmarks" class="headerlink" title="13 Benchmarks"></a>13 Benchmarks</h1><p>n.行业基准;标杆;基准;基准测试;标竿</p><p>例:<br>The truck industry is a <strong>benchmark</strong> for the economy.<br>卡车业是衡量经济的一个基准</p><h1 id="14-complementary"><a href="#14-complementary" class="headerlink" title="14 complementary"></a>14 complementary</h1><p>adj.互补;互补性;互补的;补充;补充的</p><p>例:<br>To improve the quality of life through work, two <strong>complementary</strong> strategies are necessary<br>想通过工作提高生活质量，需要两个相辅相成的策略</p><h1 id="15-License"><a href="#15-License" class="headerlink" title="15 License"></a>15 License</h1><p>n.许可证;执照;特许<br>vt.许可;批准</p><p>例(n):<br>The government revoked her husband’s <strong>license</strong> to operate migrant labor crews.<br>政府撤销了她丈夫管理外来打工人群的许可证</p><p>例(vt):<br>The new drug has not yet been <strong>licensed</strong> in the US.<br>这种新药尚未在美国获得许可</p><h1 id="16-revoke"><a href="#16-revoke" class="headerlink" title="16 revoke"></a>16 revoke</h1><p>vt.撤销;取消;废除;使无效</p><p>例(vt):<br>I will revoke the challenge.<br>我要撤销这次挑战</p><h1 id="17-domain"><a href="#17-domain" class="headerlink" title="17 domain"></a>17 domain</h1><p>n.(知识、活动的)领域，范围，范畴;(尤指旧时个人、国家等所拥有或统治的)领土，领地，势力范围;域;定义域;区域</p><p>例:<br>The information has been placed in the public <strong>domain</strong>.<br>这资料不受版权保护。</p><h1 id="18-bearer"><a href="#18-bearer" class="headerlink" title="18 bearer"></a>18 bearer</h1><p>n.持票人;持有者;(尤指在礼仪中)持…者;传达消息者;送信人;正式持有人;传授者，传播者</p><p>例:</p><p>The <strong>bearer</strong> need only present proper identification.<br>持票人只需现时有效证明。</p><h1 id="19-stdlib"><a href="#19-stdlib" class="headerlink" title="19 stdlib"></a>19 stdlib</h1><p>标准库</p><p>例:<br>On the other hand, sometimes you do need full threads ( and sometimes the Ruby <strong>stdlib</strong> forces them on you)<br>然而有时你还是需要用完全线程（有时Ruby标准库会迫使你使用它）</p><h1 id="20-manually"><a href="#20-manually" class="headerlink" title="20 manually"></a>20 manually</h1><p>adv.用手地；手动地；人工地</p><p>例:<br>we have to <strong>manually</strong> tap into the central server.<br>就必须手动切入中央服务器</p><h1 id="21-tap"><a href="#21-tap" class="headerlink" title="21 tap"></a>21 tap</h1><p>n.水龙头;龙头;旋塞;轻击;轻拍;轻敲;轻扣;电话窃听;轻拍音<br>v.轻敲;轻拍;轻叩;(用…)轻轻叩击;利用，开发，发掘(已有的资源、知识等);（在电话上）安装窃听器，搭线窃听;在（树）上切口（导出液体）</p><p>例(n):<br>Don’t leave the tap running.<br>别把水龙头开着白白流水。</p><p>例(v):<br>We need to tap the expertise of the people we already have.<br>我们需要利用我们现有人员的专业知识</p><h1 id="22-detect"><a href="#22-detect" class="headerlink" title="22 detect"></a>22 detect</h1><p>vt.发现;查明;侦察出</p><p>And you know, we couldn’t detect any brain activity.<br>你知道，我们没有发现任何大脑活动</p><h1 id="23-infer"><a href="#23-infer" class="headerlink" title="23 infer"></a>23 infer</h1><p>v.推断;推论;推理;间接地提出;暗示;意指</p><p>例:<br>Men observe and infer in all sorts of ways.<br>人们通过各个途径进行观察和推断</p><h1 id="24-explicit"><a href="#24-explicit" class="headerlink" title="24 explicit"></a>24 explicit</h1><p>adj.明确的;清楚明白的;易于理解的;(说话)清晰的;直言的;坦率的;不隐晦的;不含糊的</p><p>例:<br>The reasons for the decision should be made explicit.<br>应该直截了当给出决定的理由。</p><h1 id="25-correlation"><a href="#25-correlation" class="headerlink" title="25 correlation"></a>25 correlation</h1><p>n.相关性;相关;关联;相互关系</p><p>例:<br>There is a direct correlation between exposure to sun and skin cancer.<br>皮肤暴露在太阳下与皮肤癌直接相关</p><h1 id="26-parameter"><a href="#26-parameter" class="headerlink" title="26 parameter"></a>26 parameter</h1><p>n.参数;决定因素;规范;范围</p><p>例:<br>It is the <strong>parameter</strong> of distribution.<br>这就是分布参数。</p><h1 id="27-volatile"><a href="#27-volatile" class="headerlink" title="27 volatile"></a>27 volatile</h1><p>adj.不稳定的;易挥发的;易变的;无定性的;无常性的;可能急剧波动的;易恶化的;易发散的</p><p>例:<br>There have been riots before and the situation is volatile.<br>以前曾发生过暴乱，现在局势不太稳定</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链简介</title>
      <link href="/hexoblog.github.io/2022/06/29/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E4%BB%8B/"/>
      <url>/hexoblog.github.io/2022/06/29/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="区块链产生"><a href="#区块链产生" class="headerlink" title="#区块链产生"></a>#区块链产生</h2><h1 id="区块链的诞生"><a href="#区块链的诞生" class="headerlink" title="区块链的诞生"></a>区块链的诞生</h1><h3 id="诞生：2009年1月，比特币问世，基于区块链结构的分布式账本技术大量出现"><a href="#诞生：2009年1月，比特币问世，基于区块链结构的分布式账本技术大量出现" class="headerlink" title="诞生：2009年1月，比特币问世，基于区块链结构的分布式账本技术大量出现"></a>诞生：2009年1月，比特币问世，基于区块链结构的分布式账本技术大量出现</h3><h3 id="区块链的本质：融合了现代密码学和分布式网络技术等重要成果"><a href="#区块链的本质：融合了现代密码学和分布式网络技术等重要成果" class="headerlink" title="区块链的本质：融合了现代密码学和分布式网络技术等重要成果"></a>区块链的本质：融合了现代密码学和分布式网络技术等重要成果</h3><span id="more"></span><h4 id="数据存储：区块：一种交易记录的数据结构"><a href="#数据存储：区块：一种交易记录的数据结构" class="headerlink" title="数据存储：区块：一种交易记录的数据结构"></a>数据存储：区块：一种交易记录的数据结构</h4><h5 id="1-区块主体：负责记录前一段时间内所有的交易记录"><a href="#1-区块主体：负责记录前一段时间内所有的交易记录" class="headerlink" title="1.区块主体：负责记录前一段时间内所有的交易记录"></a>1.区块主体：负责记录前一段时间内所有的交易记录</h5><h5 id="2-区块头：记录前期交易的数据指纹和本区块的数据指纹"><a href="#2-区块头：记录前期交易的数据指纹和本区块的数据指纹" class="headerlink" title="2.区块头：记录前期交易的数据指纹和本区块的数据指纹"></a>2.区块头：记录前期交易的数据指纹和本区块的数据指纹</h5><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><h5 id="1-去中心化：任意节点间权利义务均等"><a href="#1-去中心化：任意节点间权利义务均等" class="headerlink" title="1.去中心化：任意节点间权利义务均等"></a>1.去中心化：任意节点间权利义务均等</h5><h5 id="2-集体维护：账本由所有节点共同维护"><a href="#2-集体维护：账本由所有节点共同维护" class="headerlink" title="2.集体维护：账本由所有节点共同维护"></a>2.集体维护：账本由所有节点共同维护</h5><h5 id="3-高度透明：账本和规则所以人可审查"><a href="#3-高度透明：账本和规则所以人可审查" class="headerlink" title="3.高度透明：账本和规则所以人可审查"></a>3.高度透明：账本和规则所以人可审查</h5><h5 id="4-匿名：区块链解决了信任问题，没必要了解对方"><a href="#4-匿名：区块链解决了信任问题，没必要了解对方" class="headerlink" title="4.匿名：区块链解决了信任问题，没必要了解对方"></a>4.匿名：区块链解决了信任问题，没必要了解对方</h5><h4 id="账本科技的重要性"><a href="#账本科技的重要性" class="headerlink" title="账本科技的重要性"></a>账本科技的重要性</h4><h5 id="保障社会文明的最核心的基石"><a href="#保障社会文明的最核心的基石" class="headerlink" title="保障社会文明的最核心的基石"></a>保障社会文明的最核心的基石</h5><h5 id="人类发明的重要历程"><a href="#人类发明的重要历程" class="headerlink" title="人类发明的重要历程"></a>人类发明的重要历程</h5><h4 id="账本科技的演化"><a href="#账本科技的演化" class="headerlink" title="账本科技的演化"></a>账本科技的演化</h4><h5 id="阶段一：简单账本"><a href="#阶段一：简单账本" class="headerlink" title="阶段一：简单账本"></a>阶段一：简单账本</h5><h5 id="特点：1-简单的原始记账2-利用单条记录进行账目记录，使用物理媒介"><a href="#特点：1-简单的原始记账2-利用单条记录进行账目记录，使用物理媒介" class="headerlink" title="特点：1.简单的原始记账2.利用单条记录进行账目记录，使用物理媒介"></a>特点：1.简单的原始记账2.利用单条记录进行账目记录，使用物理媒介</h5><h5 id="缺点：1-账户记录不完整2-不能反应经济业务来龙去脉3-不便于检查账户记录完整4-容易错误，容易篡改"><a href="#缺点：1-账户记录不完整2-不能反应经济业务来龙去脉3-不便于检查账户记录完整4-容易错误，容易篡改" class="headerlink" title="缺点：1.账户记录不完整2.不能反应经济业务来龙去脉3.不便于检查账户记录完整4.容易错误，容易篡改"></a>缺点：1.账户记录不完整2.不能反应经济业务来龙去脉3.不便于检查账户记录完整4.容易错误，容易篡改</h5><h5 id="阶段二：复式账本"><a href="#阶段二：复式账本" class="headerlink" title="阶段二：复式账本"></a>阶段二：复式账本</h5><h6 id="交易本质的是将某种价值从来源方转移到目标方"><a href="#交易本质的是将某种价值从来源方转移到目标方" class="headerlink" title="交易本质的是将某种价值从来源方转移到目标方"></a>交易本质的是将某种价值从来源方转移到目标方</h6><h5 id="特点：1-容易对交易来龙去脉进行追踪2-可以验证账目是否正确"><a href="#特点：1-容易对交易来龙去脉进行追踪2-可以验证账目是否正确" class="headerlink" title="特点：1.容易对交易来龙去脉进行追踪2.可以验证账目是否正确"></a>特点：1.容易对交易来龙去脉进行追踪2.可以验证账目是否正确</h5><h5 id="缺点：对账困难、发现问题不及时、存在联合舞弊的可能"><a href="#缺点：对账困难、发现问题不及时、存在联合舞弊的可能" class="headerlink" title="缺点：对账困难、发现问题不及时、存在联合舞弊的可能"></a>缺点：对账困难、发现问题不及时、存在联合舞弊的可能</h5><h5 id="阶段三：数字化账本"><a href="#阶段三：数字化账本" class="headerlink" title="阶段三：数字化账本"></a>阶段三：数字化账本</h5><h5 id="特点：1-记账方法本身较于复式记账没有太多创新2-账本的规模、处理的速度、账本的复杂度有了提升"><a href="#特点：1-记账方法本身较于复式记账没有太多创新2-账本的规模、处理的速度、账本的复杂度有了提升" class="headerlink" title="特点：1.记账方法本身较于复式记账没有太多创新2.账本的规模、处理的速度、账本的复杂度有了提升"></a>特点：1.记账方法本身较于复式记账没有太多创新2.账本的规模、处理的速度、账本的复杂度有了提升</h5><h5 id="缺点（准确来说是中心化账本存在的问题）：1-十分依赖中心化机构的可信度2-信息存储安全，如支付宝数据库崩掉，信息丢失咋办3-中心化机构掌握客户全部的权力，特别是数据权力，而中心机构掌握的资源越多，垄断机构获得的利益就越多"><a href="#缺点（准确来说是中心化账本存在的问题）：1-十分依赖中心化机构的可信度2-信息存储安全，如支付宝数据库崩掉，信息丢失咋办3-中心化机构掌握客户全部的权力，特别是数据权力，而中心机构掌握的资源越多，垄断机构获得的利益就越多" class="headerlink" title="缺点（准确来说是中心化账本存在的问题）：1.十分依赖中心化机构的可信度2.信息存储安全，如支付宝数据库崩掉，信息丢失咋办3.中心化机构掌握客户全部的权力，特别是数据权力，而中心机构掌握的资源越多，垄断机构获得的利益就越多"></a>缺点（准确来说是中心化账本存在的问题）：1.十分依赖中心化机构的可信度2.信息存储安全，如支付宝数据库崩掉，信息丢失咋办3.中心化机构掌握客户全部的权力，特别是数据权力，而中心机构掌握的资源越多，垄断机构获得的利益就越多</h5><h5 id="阶段四：分布式账本"><a href="#阶段四：分布式账本" class="headerlink" title="阶段四：分布式账本"></a>阶段四：分布式账本</h5><h5 id="定义：1．-分布式账本是一种可在所有成员之间共享、复制和同步的账本。"><a href="#定义：1．-分布式账本是一种可在所有成员之间共享、复制和同步的账本。" class="headerlink" title="定义：1． 分布式账本是一种可在所有成员之间共享、复制和同步的账本。"></a>定义：1． 分布式账本是一种可在所有成员之间共享、复制和同步的账本。</h5><h5 id="特点：1-第三方记账，区分于复式记账各自记账2-共享记账3-全信息账本，不仅记录资金流，也记录了信息流"><a href="#特点：1-第三方记账，区分于复式记账各自记账2-共享记账3-全信息账本，不仅记录资金流，也记录了信息流" class="headerlink" title="特点：1.第三方记账，区分于复式记账各自记账2.共享记账3.全信息账本，不仅记录资金流，也记录了信息流"></a>特点：1.第三方记账，区分于复式记账各自记账2.共享记账3.全信息账本，不仅记录资金流，也记录了信息流</h5><h2 id="区块链基本概念"><a href="#区块链基本概念" class="headerlink" title="#区块链基本概念"></a>#区块链基本概念</h2><h3 id="区块链定义"><a href="#区块链定义" class="headerlink" title="区块链定义"></a>区块链定义</h3><h4 id="区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的分布式账本"><a href="#区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的分布式账本" class="headerlink" title="区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的分布式账本"></a>区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的分布式账本</h4><h4 id="不可篡改"><a href="#不可篡改" class="headerlink" title="不可篡改"></a>不可篡改</h4><h5 id="数据结构：由于区块包含父区块的数据指纹，任何区块的修改都会引起所在区块的数据指纹发生变化，导致后面的其他节点发生变化"><a href="#数据结构：由于区块包含父区块的数据指纹，任何区块的修改都会引起所在区块的数据指纹发生变化，导致后面的其他节点发生变化" class="headerlink" title="数据结构：由于区块包含父区块的数据指纹，任何区块的修改都会引起所在区块的数据指纹发生变化，导致后面的其他节点发生变化"></a>数据结构：由于区块包含父区块的数据指纹，任何区块的修改都会引起所在区块的数据指纹发生变化，导致后面的其他节点发生变化</h5><h5 id="数据存储：区块数据分布存在多个节点中，系统自定认为最多的账本是真账本，任何人想要篡改数据就需要修改51-以上节点数据"><a href="#数据存储：区块数据分布存在多个节点中，系统自定认为最多的账本是真账本，任何人想要篡改数据就需要修改51-以上节点数据" class="headerlink" title="数据存储：区块数据分布存在多个节点中，系统自定认为最多的账本是真账本，任何人想要篡改数据就需要修改51%以上节点数据"></a>数据存储：区块数据分布存在多个节点中，系统自定认为最多的账本是真账本，任何人想要篡改数据就需要修改51%以上节点数据</h5><h5 id="不可伪造：所有上链信息都可追溯到其诞生的那个区块，几乎包含其所有信息"><a href="#不可伪造：所有上链信息都可追溯到其诞生的那个区块，几乎包含其所有信息" class="headerlink" title="不可伪造：所有上链信息都可追溯到其诞生的那个区块，几乎包含其所有信息"></a>不可伪造：所有上链信息都可追溯到其诞生的那个区块，几乎包含其所有信息</h5><h3 id="区块链交易流程"><a href="#区块链交易流程" class="headerlink" title="区块链交易流程"></a>区块链交易流程</h3><h5 id="转账发送方–-gt-交易传播（p2p网络）–-gt-参与节点记录–-gt-记账共识–-gt-校验–-gt-区块添加–-gt-接收方收到转账"><a href="#转账发送方–-gt-交易传播（p2p网络）–-gt-参与节点记录–-gt-记账共识–-gt-校验–-gt-区块添加–-gt-接收方收到转账" class="headerlink" title="转账发送方–&gt;交易传播（p2p网络）–&gt;参与节点记录–&gt;记账共识–&gt;校验–&gt;区块添加–&gt;接收方收到转账"></a>转账发送方–&gt;交易传播（p2p网络）–&gt;参与节点记录–&gt;记账共识–&gt;校验–&gt;区块添加–&gt;接收方收到转账</h5><h2 id="区块链主要特点"><a href="#区块链主要特点" class="headerlink" title="#区块链主要特点"></a>#区块链主要特点</h2><h3 id="01-去中心化"><a href="#01-去中心化" class="headerlink" title="01.去中心化"></a>01.去中心化</h3><h4 id="a-不依赖任何第三方中介机构做背书，所有参与者自己给自己做背书"><a href="#a-不依赖任何第三方中介机构做背书，所有参与者自己给自己做背书" class="headerlink" title="a.不依赖任何第三方中介机构做背书，所有参与者自己给自己做背书"></a>a.不依赖任何第三方中介机构做背书，所有参与者自己给自己做背书</h4><h4 id="b-任意节点权力义务均等"><a href="#b-任意节点权力义务均等" class="headerlink" title="b.任意节点权力义务均等"></a>b.任意节点权力义务均等</h4><h4 id="c-系统中的数据分布式存储，数据块由具有维护功能的节点共同维护"><a href="#c-系统中的数据分布式存储，数据块由具有维护功能的节点共同维护" class="headerlink" title="c.系统中的数据分布式存储，数据块由具有维护功能的节点共同维护"></a>c.系统中的数据分布式存储，数据块由具有维护功能的节点共同维护</h4><h3 id="02-安全且不可篡改"><a href="#02-安全且不可篡改" class="headerlink" title="02.安全且不可篡改"></a>02.安全且不可篡改</h3><h4 id="a-篡改必须攻破51-的参与者信息"><a href="#a-篡改必须攻破51-的参与者信息" class="headerlink" title="a.篡改必须攻破51%的参与者信息"></a>a.篡改必须攻破51%的参与者信息</h4><h4 id="b-区块链账本中的交易数据只能通过被认可的新交易来”修正”-修正的过程就留下痕迹"><a href="#b-区块链账本中的交易数据只能通过被认可的新交易来”修正”-修正的过程就留下痕迹" class="headerlink" title="b.区块链账本中的交易数据只能通过被认可的新交易来”修正”,修正的过程就留下痕迹"></a>b.区块链账本中的交易数据只能通过被认可的新交易来”修正”,修正的过程就留下痕迹</h4><h3 id="03-公开"><a href="#03-公开" class="headerlink" title="03.公开"></a>03.公开</h3><h4 id="a-记账结果对所有参与者公开"><a href="#a-记账结果对所有参与者公开" class="headerlink" title="a.记账结果对所有参与者公开"></a>a.记账结果对所有参与者公开</h4><h4 id="b-任何人能通过公开的接口进行查询-整个系统信息高度透明"><a href="#b-任何人能通过公开的接口进行查询-整个系统信息高度透明" class="headerlink" title="b.任何人能通过公开的接口进行查询,整个系统信息高度透明"></a>b.任何人能通过公开的接口进行查询,整个系统信息高度透明</h4><h3 id="04-匿名"><a href="#04-匿名" class="headerlink" title="04.匿名"></a>04.匿名</h3><h4 id="a-记账人的实际对应人匿名"><a href="#a-记账人的实际对应人匿名" class="headerlink" title="a.记账人的实际对应人匿名"></a>a.记账人的实际对应人匿名</h4><h4 id="b-算法是实现的地址寻址-而不是个人身份"><a href="#b-算法是实现的地址寻址-而不是个人身份" class="headerlink" title="b.算法是实现的地址寻址,而不是个人身份"></a>b.算法是实现的地址寻址,而不是个人身份</h4><h4 id="c-节点数据交换遵循固定算法-其数据交互无须信任的"><a href="#c-节点数据交换遵循固定算法-其数据交互无须信任的" class="headerlink" title="c.节点数据交换遵循固定算法,其数据交互无须信任的"></a>c.节点数据交换遵循固定算法,其数据交互无须信任的</h4><h3 id="05-可追溯"><a href="#05-可追溯" class="headerlink" title="05.可追溯"></a>05.可追溯</h3><h4 id="a-区块链固化了交易历史-保证对历史的追溯查询"><a href="#a-区块链固化了交易历史-保证对历史的追溯查询" class="headerlink" title="a.区块链固化了交易历史,保证对历史的追溯查询"></a>a.区块链固化了交易历史,保证对历史的追溯查询</h4><h4 id="b-能够防止一系列信息伪造-能够知道上链信息来源-产生时间"><a href="#b-能够防止一系列信息伪造-能够知道上链信息来源-产生时间" class="headerlink" title="b.能够防止一系列信息伪造,能够知道上链信息来源,产生时间"></a>b.能够防止一系列信息伪造,能够知道上链信息来源,产生时间</h4><h2 id="区块链演进"><a href="#区块链演进" class="headerlink" title="#区块链演进"></a>#区块链演进</h2><h3 id="三次阶段："><a href="#三次阶段：" class="headerlink" title="三次阶段："></a>三次阶段：</h3><h3 id="区块链1-0"><a href="#区块链1-0" class="headerlink" title="区块链1.0"></a>区块链1.0</h3><h5 id="可编程货币-比特币-数字货币-基于程序算法"><a href="#可编程货币-比特币-数字货币-基于程序算法" class="headerlink" title="可编程货币:比特币,数字货币,基于程序算法"></a>可编程货币:比特币,数字货币,基于程序算法</h5><h5 id="瓶颈-挖矿高耗能"><a href="#瓶颈-挖矿高耗能" class="headerlink" title="瓶颈:挖矿高耗能"></a>瓶颈:挖矿高耗能</h5><h3 id="区块链2-0"><a href="#区块链2-0" class="headerlink" title="区块链2.0"></a>区块链2.0</h3><h5 id="可编程金融-以太坊-数字货币-智能合约"><a href="#可编程金融-以太坊-数字货币-智能合约" class="headerlink" title="可编程金融:以太坊,数字货币,智能合约"></a>可编程金融:以太坊,数字货币,智能合约</h5><h5 id="瓶颈-拥堵手续费高"><a href="#瓶颈-拥堵手续费高" class="headerlink" title="瓶颈:拥堵手续费高"></a>瓶颈:拥堵手续费高</h5><h3 id="区块链3-0"><a href="#区块链3-0" class="headerlink" title="区块链3.0"></a>区块链3.0</h3><h5 id="可编程社会-数字票证-基于事物资产映射"><a href="#可编程社会-数字票证-基于事物资产映射" class="headerlink" title="可编程社会:数字票证,基于事物资产映射"></a>可编程社会:数字票证,基于事物资产映射</h5><h5 id="解决1-0-2-0瓶颈并行绿色-高兼容"><a href="#解决1-0-2-0瓶颈并行绿色-高兼容" class="headerlink" title="解决1.0 2.0瓶颈并行绿色,高兼容"></a>解决1.0 2.0瓶颈并行绿色,高兼容</h5><h3 id="三次热潮"><a href="#三次热潮" class="headerlink" title="三次热潮"></a>三次热潮</h3><h3 id="第一次热潮-以比特币为核心的加密货币"><a href="#第一次热潮-以比特币为核心的加密货币" class="headerlink" title="第一次热潮:以比特币为核心的加密货币"></a>第一次热潮:以比特币为核心的加密货币</h3><h3 id="第二次热潮-以区块链为基础的分布式账本"><a href="#第二次热潮-以区块链为基础的分布式账本" class="headerlink" title="第二次热潮:以区块链为基础的分布式账本"></a>第二次热潮:以区块链为基础的分布式账本</h3><h3 id="第三次热潮-ICO-资本关注-部分项目落地"><a href="#第三次热潮-ICO-资本关注-部分项目落地" class="headerlink" title="第三次热潮:ICO,资本关注,部分项目落地"></a>第三次热潮:ICO,资本关注,部分项目落地</h3><h2 id="区块链的主要类型及应用"><a href="#区块链的主要类型及应用" class="headerlink" title="#区块链的主要类型及应用"></a>#区块链的主要类型及应用</h2><h3 id="许可链"><a href="#许可链" class="headerlink" title="许可链"></a>许可链</h3><h4 id="联盟链"><a href="#联盟链" class="headerlink" title="联盟链"></a>联盟链</h4><h5 id="a-特点："><a href="#a-特点：" class="headerlink" title="a.特点："></a>a.特点：</h5><h5 id="仅联盟成员参与-读写由联盟规则制定-交易速度较于公有链大大提升"><a href="#仅联盟成员参与-读写由联盟规则制定-交易速度较于公有链大大提升" class="headerlink" title="仅联盟成员参与;读写由联盟规则制定;交易速度较于公有链大大提升"></a>仅联盟成员参与;读写由联盟规则制定;交易速度较于公有链大大提升</h5><h5 id="b-应用场景"><a href="#b-应用场景" class="headerlink" title="b.应用场景"></a>b.应用场景</h5><h5 id="01-使用在多个成员角色的环境中，可以解决结算问题，降低两地结算的成本和时间，适合于机构间的交易、结算等B2B场景，因此金融行业应用最广泛"><a href="#01-使用在多个成员角色的环境中，可以解决结算问题，降低两地结算的成本和时间，适合于机构间的交易、结算等B2B场景，因此金融行业应用最广泛" class="headerlink" title="01.使用在多个成员角色的环境中，可以解决结算问题，降低两地结算的成本和时间，适合于机构间的交易、结算等B2B场景，因此金融行业应用最广泛"></a>01.使用在多个成员角色的环境中，可以解决结算问题，降低两地结算的成本和时间，适合于机构间的交易、结算等B2B场景，因此金融行业应用最广泛</h5><h5 id="02-比如银行之间的支付结算、企业之间的物流等"><a href="#02-比如银行之间的支付结算、企业之间的物流等" class="headerlink" title="02.比如银行之间的支付结算、企业之间的物流等"></a>02.比如银行之间的支付结算、企业之间的物流等</h5><h4 id="私有链"><a href="#私有链" class="headerlink" title="私有链"></a>私有链</h4><h5 id="a-特点-对外不开放-仅仅在内部使用的系统-信息不公开"><a href="#a-特点-对外不开放-仅仅在内部使用的系统-信息不公开" class="headerlink" title="a.特点:对外不开放,仅仅在内部使用的系统,信息不公开"></a>a.特点:对外不开放,仅仅在内部使用的系统,信息不公开</h5><h5 id="b-应用场景-1"><a href="#b-应用场景-1" class="headerlink" title="b.应用场景"></a>b.应用场景</h5><h5 id="01-限于企业、机构或者单独个体使用，彼此之间需要透明，但没必要对外公众透明"><a href="#01-限于企业、机构或者单独个体使用，彼此之间需要透明，但没必要对外公众透明" class="headerlink" title="01.限于企业、机构或者单独个体使用，彼此之间需要透明，但没必要对外公众透明"></a>01.限于企业、机构或者单独个体使用，彼此之间需要透明，但没必要对外公众透明</h5><h5 id="02-比如企业的票据管理、账务审计、供应链管理等，或者一些政务管理系统等"><a href="#02-比如企业的票据管理、账务审计、供应链管理等，或者一些政务管理系统等" class="headerlink" title="02.比如企业的票据管理、账务审计、供应链管理等，或者一些政务管理系统等"></a>02.比如企业的票据管理、账务审计、供应链管理等，或者一些政务管理系统等</h5><h3 id="非许可链-公有链"><a href="#非许可链-公有链" class="headerlink" title="非许可链(公有链)"></a>非许可链(公有链)</h3><h4 id="a-特点-任何人可参与使用和维护-参与者多为匿名-信息完全公开"><a href="#a-特点-任何人可参与使用和维护-参与者多为匿名-信息完全公开" class="headerlink" title="a.特点:任何人可参与使用和维护,参与者多为匿名,信息完全公开"></a>a.特点:任何人可参与使用和维护,参与者多为匿名,信息完全公开</h4><h4 id="b-应用场景-2"><a href="#b-应用场景-2" class="headerlink" title="b.应用场景"></a>b.应用场景</h4><h5 id="01-凡是需要公众参与，及最大限度保证数据公开透明的系统"><a href="#01-凡是需要公众参与，及最大限度保证数据公开透明的系统" class="headerlink" title="01.凡是需要公众参与，及最大限度保证数据公开透明的系统"></a>01.凡是需要公众参与，及最大限度保证数据公开透明的系统</h5><h5 id="02-比如数字货币系统、众筹系统、金融交易系统等"><a href="#02-比如数字货币系统、众筹系统、金融交易系统等" class="headerlink" title="02.比如数字货币系统、众筹系统、金融交易系统等"></a>02.比如数字货币系统、众筹系统、金融交易系统等</h5><h3 id="不可能三角-1-去中心化-公有链-2-安全-私有链-3-高效-联盟链"><a href="#不可能三角-1-去中心化-公有链-2-安全-私有链-3-高效-联盟链" class="headerlink" title="不可能三角:1.去中心化(公有链) 2.安全 (私有链)3.高效(联盟链)"></a>不可能三角:1.去中心化(公有链) 2.安全 (私有链)3.高效(联盟链)</h3><h2 id="区块链现实意义"><a href="#区块链现实意义" class="headerlink" title="#区块链现实意义"></a>#区块链现实意义</h2><h3 id="核心价值"><a href="#核心价值" class="headerlink" title="核心价值"></a>核心价值</h3><h5 id="区块链解决了信息可信问题"><a href="#区块链解决了信息可信问题" class="headerlink" title="区块链解决了信息可信问题"></a>区块链解决了信息可信问题</h5><h5 id="区块链解决了价值传递问题"><a href="#区块链解决了价值传递问题" class="headerlink" title="区块链解决了价值传递问题"></a>区块链解决了价值传递问题</h5><h3 id="业务特性"><a href="#业务特性" class="headerlink" title="业务特性"></a>业务特性</h3><h5 id="可信任性"><a href="#可信任性" class="headerlink" title="可信任性"></a>可信任性</h5><h5 id="降低成本"><a href="#降低成本" class="headerlink" title="降低成本"></a>降低成本</h5><h5 id="增强安全"><a href="#增强安全" class="headerlink" title="增强安全"></a>增强安全</h5><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h6 id="所有跟信息、价值（包括货币、证券、专利、版权、数字商品、实际物品等）、信用等相关的交换过程，都将可能从区块链技术中得到启发或直接受益"><a href="#所有跟信息、价值（包括货币、证券、专利、版权、数字商品、实际物品等）、信用等相关的交换过程，都将可能从区块链技术中得到启发或直接受益" class="headerlink" title="所有跟信息、价值（包括货币、证券、专利、版权、数字商品、实际物品等）、信用等相关的交换过程，都将可能从区块链技术中得到启发或直接受益"></a>所有跟信息、价值（包括货币、证券、专利、版权、数字商品、实际物品等）、信用等相关的交换过程，都将可能从区块链技术中得到启发或直接受益</h6><h3 id="现实意义"><a href="#现实意义" class="headerlink" title="现实意义"></a>现实意义</h3><h5 id="人类社会形成的基础"><a href="#人类社会形成的基础" class="headerlink" title="人类社会形成的基础"></a>人类社会形成的基础</h5><h5 id="现代信息世界的组成"><a href="#现代信息世界的组成" class="headerlink" title="现代信息世界的组成"></a>现代信息世界的组成</h5>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比特币简介</title>
      <link href="/hexoblog.github.io/2022/06/18/%E6%AF%94%E7%89%B9%E5%B8%81%E7%AE%80%E4%BB%8B/"/>
      <url>/hexoblog.github.io/2022/06/18/%E6%AF%94%E7%89%B9%E5%B8%81%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="01-比特币简介"><a href="#01-比特币简介" class="headerlink" title="01.比特币简介"></a>01.比特币简介</h1><h4 id="比特币的诞生："><a href="#比特币的诞生：" class="headerlink" title="比特币的诞生："></a>比特币的诞生：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">| 1977年  |货币非国有化主张</span><br><span class="line">| 1982年  |拜占庭问题</span><br><span class="line">| 1990年  |Paxos算法</span><br><span class="line">| 1991年  |时间戳确保数位文件安全协议</span><br><span class="line">| 1997年  |那哈希现金系统</span><br><span class="line">| 1998年  |Pow机制</span><br><span class="line">| 2008年前|RPow（可重复使用的工作量证明）</span><br><span class="line">| 2008年  |白皮书《比特币：一种点对点电子现金系统》</span><br></pre></td></tr></table></figure><pre><code>比特币白皮书：[比特币₿白皮书 BTCpapers.com《比特币：一种点对点的电子现金系统](https://github.com/GammaGao/bitcoinwhitepaper)本质：一套管钱的账本</code></pre><span id="more"></span><hr><h1 id="02-比特币系统的工作原理"><a href="#02-比特币系统的工作原理" class="headerlink" title="02.比特币系统的工作原理"></a>02.比特币系统的工作原理</h1><h4 id="比特币面临的挑战？"><a href="#比特币面临的挑战？" class="headerlink" title="比特币面临的挑战？"></a>比特币面临的挑战？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为什么要动用自己的计算机资源来存储这些信息呢??</span><br><span class="line">以谁的记录为准？？</span><br><span class="line">比特币如何做到支付功能??</span><br><span class="line">比特币如何防伪??</span><br><span class="line">比特币如何防篡改??</span><br><span class="line">比特币如何防双重支付??</span><br></pre></td></tr></table></figure><h4 id="比特币交易流程："><a href="#比特币交易流程：" class="headerlink" title="比特币交易流程："></a>比特币交易流程：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Alice打开他的钱包--&gt;</span><br><span class="line">Alice扫描Bob的比特币地址--&gt;</span><br><span class="line">Alice填写交易账单--&gt;</span><br><span class="line">Alice提交交易账单给钱包--&gt;</span><br><span class="line">钱包使用Alice的私钥对交易账单对交易账单签名--&gt;</span><br><span class="line">交易被发送到比特币网络上最近的节点--&gt;</span><br><span class="line">矿工将交易打包到下一个要挖掘的区块--&gt;</span><br><span class="line">矿工开始挖矿--&gt;</span><br><span class="line">获取该块记账权的矿工将新区块传播到网络--&gt;</span><br><span class="line">其他节点验证挖矿结果并传播新区块--&gt;</span><br><span class="line">Bob看到了第一个确认--&gt;</span><br><span class="line">(创建每个区块都会出现新的确认)</span><br></pre></td></tr></table></figure><h4 id="比特币钱包"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">·本质：</span><br><span class="line">       比特币钱包是用来存放比特币地址和数字密钥的(地址相当于银行卡卡号;密钥相当于银行卡密码)</span><br><span class="line">       比特币的所有权是通过数字密钥,比特币地址和数字签名确立的</span><br><span class="line">       密钥相当于银行卡密码；地址相当于银行卡卡号</span><br><span class="line"></span><br><span class="line">·分类：</span><br><span class="line">       热钱包:在线钱包</span><br><span class="line">       冷钱包:离线钱包</span><br><span class="line"></span><br><span class="line">·支付相关：</span><br><span class="line">      比特币私钥主要用于用户接收支付，公钥用于别人来验证</span><br><span class="line">      支付比特币时，比特币的当前拥有者需要在交易中提交其签名和公钥</span><br><span class="line">      比特币地址用于接收比特币，私钥用于比特币支付时进行交易签名</span><br><span class="line">      每个输入都是提供比特币的交易和地址；每个输出是接收比特币的地址，以及发送到该地址的比特币数量</span><br></pre></td></tr></table></figure><h4 id="比特币地址生成"><a href="#比特币地址生成" class="headerlink" title="比特币地址生成 :"></a>比特币地址生成 :</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随机函数--&gt;私钥--(椭圆曲线)--&gt;公钥--(系列哈希其他处理)--&gt;比特币地址</span><br></pre></td></tr></table></figure><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解锁脚本:</span><br><span class="line">      由其他人提供,用以解决&quot;障碍&quot;</span><br><span class="line">锁定脚本:</span><br><span class="line">      存在于一笔交易输出中,如果要使用输出,锁定脚本时必须被满足的&quot;障碍&quot;</span><br></pre></td></tr></table></figure><h4 id="双花问题"><a href="#双花问题" class="headerlink" title="双花问题"></a>双花问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">定义:</span><br><span class="line">   &quot;双花&quot;即双重支付,指的是在数字货币系统中,由于数据的可复制性,使得系统可能存在同一笔数字资产因不当操作被重复使用的情况</span><br><span class="line"></span><br><span class="line">重要性:</span><br><span class="line">   &quot;双花&quot;是任何一种数字货币都要解决的问题</span><br><span class="line"></span><br><span class="line">比特币解决方式:</span><br><span class="line">            未花费交易输出(UTXO)</span><br><span class="line">                定义:UTXO是一个包含交易数据和执行代码的数据结构,可以理解未收到但尚未花费的交易清单</span><br><span class="line">                普遍性:比特币系统中记录着当前每一笔&quot;UTXO&quot;</span><br><span class="line">                优点</span><br><span class="line">                    a.不能被分割,只能被消耗,大大减少计算量</span><br><span class="line">                    b.配合地址使用,具备天然匿名性,保护了账户安全</span><br><span class="line">                    c.由于地址存在,UTXO销毁和产生,都可追溯,很难伪造</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            时间戳</span><br><span class="line">                定义:从格林威治时间1970年01月01日00时00分00秒起,至现在的总秒数,唯一标识区块数据的写入时刻</span><br><span class="line">                作用:时间戳是一个能表示一份数据在某个特定时间已经存在的,完整的,可验证的数据,通常是一个字符序列,唯一地标识某一刻的时间</span><br><span class="line">                普遍性:时间戳保证每个区块按时间顺序连成区块链,时间戳也为区块链上每一笔数据打上时间标记(类似物品上的生产日期)</span><br><span class="line"></span><br><span class="line">            解决双花的两种问题</span><br><span class="line">                a.第一笔交易已经入块，第二笔交易还未入块</span><br><span class="line">                    解决思路：每笔交易都需要先确认对应比特币之前的状态，如果它之前已经被标记为花掉，那么新的交易会被拒绝</span><br><span class="line"></span><br><span class="line">                b.第一笔交易还未入块，第二笔交易也未入块</span><br><span class="line">                    解决思路：正常情况下，节点会确认先接收到的那一个交易，另外一个交易会被拒绝；如果被不同节点确认，区块链将会发生分叉，剩余节点会选取最长的链上构建新的区块，当其中一笔交易被6个节点确认后，可以认为这笔交易获得了最终的确认</span><br></pre></td></tr></table></figure><hr><h1 id="03-比特币数据结构"><a href="#03-比特币数据结构" class="headerlink" title="03.比特币数据结构"></a>03.比特币数据结构</h1><h4 id="区块链的存储结构"><a href="#区块链的存储结构" class="headerlink" title="区块链的存储结构:"></a>区块链的存储结构:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义：连接了父区块和子区块,每一个区块分为区块头和区块体</span><br></pre></td></tr></table></figure><h4 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">作用:主要用来存储本区块的一些相关属性</span><br><span class="line"> </span><br><span class="line">组成:</span><br><span class="line">         本区块哈希值:</span><br><span class="line">                    定义:H(n),包含父区块与本区块全部交易信息的DNA</span><br><span class="line">         系统版本号</span><br><span class="line">         父区块哈希值</span><br><span class="line">         时间戳:</span><br><span class="line">                    定义:从格林威治时间1970年01月01日00时00分00秒起,至现在的总秒数,唯一标识区块数据的写入时刻</span><br><span class="line"></span><br><span class="line">         随机值:</span><br><span class="line">                    定义:挖矿参数H(随机数)=hash(版本号+父区块哈希值+默克尔值+时间戳+时间数)</span><br><span class="line"></span><br><span class="line">         默克尔树:</span><br><span class="line">                    结构:交易的哈希生成唯一的默克尔树</span><br><span class="line">                    应用：</span><br><span class="line">                        a.快速比较大量数据</span><br><span class="line">                        b.快速定位修改</span><br><span class="line">                        c.快速检索防伪</span><br><span class="line">                        d.零知识证明</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         挖矿难度:</span><br><span class="line">                    新难度=旧难度*(2016*10min)/过去2016个区块生成总时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="区块体"><a href="#区块体" class="headerlink" title="区块体:"></a>区块体:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义：用来存储真实的交易数据记录的存储结构</span><br></pre></td></tr></table></figure><hr><h1 id="04-比特币交易签名及验证"><a href="#04-比特币交易签名及验证" class="headerlink" title="04.比特币交易签名及验证"></a>04.比特币交易签名及验证</h1><h4 id="比特币验证"><a href="#比特币验证" class="headerlink" title="比特币验证:"></a>比特币验证:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">账号所有权验证:如何在不泄露密码的前提下,证明自己对某个账户的所有权?</span><br><span class="line">比特币所有权验证:如何在不泄露密码的前提下,证明自己对要交易的比特币的所有权?</span><br><span class="line">交易所有权验证:如何在不泄露密码的前提下,证明某个交易的确时你创建的呢?</span><br><span class="line">解决方法：在去中心化的前提下，每个节点独立进行验证</span><br></pre></td></tr></table></figure><h4 id="交易的构成："><a href="#交易的构成：" class="headerlink" title="交易的构成："></a>交易的构成：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:计算花费的UTXO来源</span><br><span class="line">Output：计划生成几个UTXO，分别给谁</span><br></pre></td></tr></table></figure><h4 id="交易的签名"><a href="#交易的签名" class="headerlink" title="交易的签名"></a>交易的签名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">锁定脚本(scriptPubKey):放置在输出上面的花费条件，指定了今后花费这笔UTXO必须要满足的条件</span><br><span class="line">解锁脚本(scriptSig)：解锁脚本是一个满足被锁定脚本在一个输出上设定的花费条件的脚本</span><br><span class="line">签名的输入：</span><br><span class="line">   a.代签名的交易数据</span><br><span class="line">   b.引用的UTXO相关信息：交易ID，序号，锁定脚本</span><br><span class="line">   c.支付者的公钥：&lt;PriK(B)&gt;</span><br><span class="line">   d.签名类型</span><br><span class="line">签名的输出：</span><br><span class="line">   scriptSig（解锁脚本）：签名(sig&gt;)、支付者的公钥(&lt;PubK(B)&gt;)</span><br></pre></td></tr></table></figure><h4 id="交易签名的验证"><a href="#交易签名的验证" class="headerlink" title="交易签名的验证"></a>交易签名的验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">交易验证目的:</span><br><span class="line">签名验证的目的:</span><br><span class="line">签名验证的方法:</span><br></pre></td></tr></table></figure><h1 id="05-比特币共识机制"><a href="#05-比特币共识机制" class="headerlink" title="05.比特币共识机制"></a>05.比特币共识机制</h1><h4 id="区块链共识机制"><a href="#区块链共识机制" class="headerlink" title="区块链共识机制:"></a>区块链共识机制:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">区块链共识算法</span><br><span class="line">区块链共识规则</span><br><span class="line">重要性:每个区块链都有自己精心设计好的规则性协议,这些协议通过共识算法来保证它们可靠得以执行</span><br></pre></td></tr></table></figure><h4 id="比特币共识机制："><a href="#比特币共识机制：" class="headerlink" title="比特币共识机制："></a>比特币共识机制：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">比特币共识算法:SHA256算法</span><br><span class="line">比特币共识机制:工作量证明(Pow)</span><br><span class="line">重要性:每一个节点必须要做一定的工作后才能赢得记账权,即工作量证明</span><br><span class="line">独立打包--&gt;交易优先级计算:交易优先级=交易UTXO的值*UTXO的块龄/交易大小(字节)</span><br><span class="line">独立验证：挖矿过程这个过程使用的是SHA256哈希函数，挖矿节节点不断重复尝试，直到它找到的随机调整数使得产生的哈希值低于某个特定的目标</span><br><span class="line">区块链的组装和选择：</span><br><span class="line">    a.孤块：</span><br><span class="line">          定义:如果节点收到了一个有效的区块,而在现有的区块链中却未找到它的父区块,那么这个区块被认为是&quot;孤块&quot;</span><br><span class="line">          出现情况:当两个区块在很短时间间隔内被挖出来,节点有可能会以相反的顺序接收到它们,这个时候孤块现象就会出现</span><br><span class="line"></span><br><span class="line">    b.分叉情况：</span><br><span class="line">          定义:</span><br></pre></td></tr></table></figure><hr><h1 id="06-比特币系统架构"><a href="#06-比特币系统架构" class="headerlink" title="06.比特币系统架构"></a>06.比特币系统架构</h1><h4 id="比特币系统逻辑结构"><a href="#比特币系统逻辑结构" class="headerlink" title="比特币系统逻辑结构"></a>比特币系统逻辑结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">应用层:</span><br><span class="line">            收付款</span><br><span class="line">            交易记录</span><br><span class="line">            区块查询</span><br><span class="line"></span><br><span class="line">激励层:</span><br><span class="line">            发行机制</span><br><span class="line">            分配机制</span><br><span class="line"></span><br><span class="line">共识层:</span><br><span class="line">            工作量证明(Pow)</span><br><span class="line"></span><br><span class="line">网络层:</span><br><span class="line">            P2P网络</span><br><span class="line">            传播机制</span><br><span class="line">            验证机制</span><br><span class="line"></span><br><span class="line">数据层:</span><br><span class="line">            区块数据</span><br><span class="line">            链式结构</span><br><span class="line">            数字签名</span><br><span class="line">            哈希函数</span><br><span class="line">            默克尔树</span><br><span class="line">            非对称加密</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ·比特币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/hexoblog.github.io/2022/06/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/hexoblog.github.io/2022/06/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="这是H1标题"><a href="#这是H1标题" class="headerlink" title="这是H1标题"></a>这是H1标题</h1><h2 id="这是H2标题"><a href="#这是H2标题" class="headerlink" title="这是H2标题"></a>这是H2标题</h2><p>这是第一段：学余时间的探索和慢慢儿的学习…教程来源于互联网，小白入场，一切稳步进行？….</p><span id="more"></span><p>这是第二段？…<br>这是第三段？</p><h3 id="这是H3标题"><a href="#这是H3标题" class="headerlink" title="这是H3标题"></a>这是H3标题</h3><p>这是第四段<strong>加粗</strong></p><h4 id="这是H4标题"><a href="#这是H4标题" class="headerlink" title="这是H4标题"></a>这是H4标题</h4><blockquote><p>这是引用</p></blockquote><h4 id="这是H4标题-1"><a href="#这是H4标题-1" class="headerlink" title="这是H4标题"></a>这是H4标题</h4><blockquote><p>这是个</p><p>块引用</p></blockquote><h4 id="这是H4标题-2"><a href="#这是H4标题-2" class="headerlink" title="这是H4标题"></a>这是H4标题</h4><blockquote><p>这是个</p><blockquote><p>嵌套块引用</p></blockquote></blockquote><h5 id="这是个H5标题"><a href="#这是个H5标题" class="headerlink" title="这是个H5标题"></a>这是个H5标题</h5><blockquote><p>也许看起来不错<br>支持块引用包含其他Markdown 格式的元素<br>www<strong>内含加粗</strong>ww</p></blockquote><h6 id="这是H6标题"><a href="#这是H6标题" class="headerlink" title="这是H6标题"></a>这是H6标题</h6><ol><li>有序列表.</li><li>列表应该以数字1起始.</li><li>结尾需要英文句号.</li><li>无英文句号结尾</li></ol><h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><ul><li>这是无序列表有英文句号结尾</li><li>这是无序列表无英文句号结尾</li><li>这是无序列表<ul><li>这是嵌套无序列表01</li><li>这是嵌套无序列表02</li></ul></li></ul><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>代码语法01：<code>user01</code> <code>user02``user03</code><br>代码语法02： <code>user `多个引号`</code></p><h3 id="这是H3标题-1"><a href="#这是H3标题-1" class="headerlink" title="这是H3标题"></a>这是H3标题</h3><hr><p>分割线：为了兼容性，在分隔线前后添加空白行</p><hr><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><p>这是一个链接：<a href="https://markdown.com.cn/">https://markdown.com.cn</a></p><p>##图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hexoblog.github.io/2022/04/12/hello-world/"/>
      <url>/hexoblog.github.io/2022/04/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
